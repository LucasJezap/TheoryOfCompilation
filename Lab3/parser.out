Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt
Rule 2     program -> program stmt
Rule 3     stmt -> expr ;
Rule 4     stmt -> RETURN expr ;
Rule 5     stmt -> BREAK ;
Rule 6     stmt -> CONTINUE ;
Rule 7     stmt -> ;
Rule 8     stmt -> { }
Rule 9     stmt_list -> stmt
Rule 10    stmt_list -> stmt_list stmt
Rule 11    stmt -> { stmt_list }
Rule 12    stmt -> PRINT list ;
Rule 13    expr -> INTNUM
Rule 14    expr -> FLOATNUM
Rule 15    expr -> STR
Rule 16    expr -> expr ADD expr
Rule 17    expr -> expr SUB expr
Rule 18    expr -> expr MUL expr
Rule 19    expr -> expr DIV expr
Rule 20    expr -> expr DOT_ADD expr
Rule 21    expr -> expr DOT_SUB expr
Rule 22    expr -> expr DOT_MUL expr
Rule 23    expr -> expr DOT_DIV expr
Rule 24    expr -> expr GT expr
Rule 25    expr -> expr LT expr
Rule 26    expr -> expr GTE expr
Rule 27    expr -> expr LTE expr
Rule 28    expr -> expr EQ expr
Rule 29    expr -> expr NEQ expr
Rule 30    expr -> EYE ( expr )
Rule 31    expr -> ONES ( expr )
Rule 32    expr -> ZEROS ( expr )
Rule 33    expr -> lvalue ASSIGN expr
Rule 34    expr -> lvalue ADD_ASSIGN expr
Rule 35    expr -> lvalue SUB_ASSIGN expr
Rule 36    expr -> lvalue MUL_ASSIGN expr
Rule 37    expr -> lvalue DIV_ASSIGN expr
Rule 38    expr -> expr '
Rule 39    lvalue -> ID
Rule 40    expr -> SUB expr
Rule 41    expr -> lvalue
Rule 42    expr -> ( expr )
Rule 43    lvalue -> expr [ list ]
Rule 44    expr -> [ ]
Rule 45    expr -> [ list ]
Rule 46    list -> expr
Rule 47    list -> list , expr
Rule 48    stmt -> IF ( expr ) stmt
Rule 49    stmt -> IF ( expr ) stmt ELSE stmt
Rule 50    stmt -> WHILE ( expr ) stmt
Rule 51    range -> expr : expr
Rule 52    stmt -> FOR ID ASSIGN range stmt

Terminals, with rules where they appear

'                    : 38
(                    : 30 31 32 42 48 49 50
)                    : 30 31 32 42 48 49 50
,                    : 47
:                    : 51
;                    : 3 4 5 6 7 12
ADD                  : 16
ADD_ASSIGN           : 34
ASSIGN               : 33 52
BREAK                : 5
CONTINUE             : 6
DIV                  : 19
DIV_ASSIGN           : 37
DOT_ADD              : 20
DOT_DIV              : 23
DOT_MUL              : 22
DOT_SUB              : 21
ELSE                 : 49
EQ                   : 28
EYE                  : 30
FLOATNUM             : 14
FOR                  : 52
GT                   : 24
GTE                  : 26
ID                   : 39 52
IF                   : 48 49
INTNUM               : 13
LT                   : 25
LTE                  : 27
MUL                  : 18
MUL_ASSIGN           : 36
NEQ                  : 29
ONES                 : 31
PRINT                : 12
RETURN               : 4
STR                  : 15
SUB                  : 17 40
SUB_ASSIGN           : 35
WHILE                : 50
ZEROS                : 32
[                    : 43 44 45
]                    : 43 44 45
error                : 
{                    : 8 11
}                    : 8 11

Nonterminals, with rules where they appear

expr                 : 3 4 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 31 32 33 34 35 36 37 38 40 42 43 46 47 48 49 50 51 51
list                 : 12 43 45 47
lvalue               : 33 34 35 36 37 41
program              : 2 0
range                : 52
stmt                 : 1 2 9 10 48 49 49 50 52
stmt_list            : 10 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt
    (2) program -> . program stmt
    (3) stmt -> . expr ;
    (4) stmt -> . RETURN expr ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . CONTINUE ;
    (7) stmt -> . ;
    (8) stmt -> . { }
    (11) stmt -> . { stmt_list }
    (12) stmt -> . PRINT list ;
    (48) stmt -> . IF ( expr ) stmt
    (49) stmt -> . IF ( expr ) stmt ELSE stmt
    (50) stmt -> . WHILE ( expr ) stmt
    (52) stmt -> . FOR ID ASSIGN range stmt
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    RETURN          shift and go to state 5
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ;               shift and go to state 4
    {               shift and go to state 8
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    program                        shift and go to state 1
    stmt                           shift and go to state 2
    expr                           shift and go to state 3
    lvalue                         shift and go to state 22

state 1

    (0) S' -> program .
    (2) program -> program . stmt
    (3) stmt -> . expr ;
    (4) stmt -> . RETURN expr ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . CONTINUE ;
    (7) stmt -> . ;
    (8) stmt -> . { }
    (11) stmt -> . { stmt_list }
    (12) stmt -> . PRINT list ;
    (48) stmt -> . IF ( expr ) stmt
    (49) stmt -> . IF ( expr ) stmt ELSE stmt
    (50) stmt -> . WHILE ( expr ) stmt
    (52) stmt -> . FOR ID ASSIGN range stmt
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    RETURN          shift and go to state 5
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ;               shift and go to state 4
    {               shift and go to state 8
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    stmt                           shift and go to state 24
    expr                           shift and go to state 3
    lvalue                         shift and go to state 22

state 2

    (1) program -> stmt .

    RETURN          reduce using rule 1 (program -> stmt .)
    BREAK           reduce using rule 1 (program -> stmt .)
    CONTINUE        reduce using rule 1 (program -> stmt .)
    ;               reduce using rule 1 (program -> stmt .)
    {               reduce using rule 1 (program -> stmt .)
    PRINT           reduce using rule 1 (program -> stmt .)
    IF              reduce using rule 1 (program -> stmt .)
    WHILE           reduce using rule 1 (program -> stmt .)
    FOR             reduce using rule 1 (program -> stmt .)
    INTNUM          reduce using rule 1 (program -> stmt .)
    FLOATNUM        reduce using rule 1 (program -> stmt .)
    STR             reduce using rule 1 (program -> stmt .)
    EYE             reduce using rule 1 (program -> stmt .)
    ONES            reduce using rule 1 (program -> stmt .)
    ZEROS           reduce using rule 1 (program -> stmt .)
    SUB             reduce using rule 1 (program -> stmt .)
    (               reduce using rule 1 (program -> stmt .)
    [               reduce using rule 1 (program -> stmt .)
    ID              reduce using rule 1 (program -> stmt .)
    $end            reduce using rule 1 (program -> stmt .)


state 3

    (3) stmt -> expr . ;
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               shift and go to state 25
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40
    [               shift and go to state 41


state 4

    (7) stmt -> ; .

    RETURN          reduce using rule 7 (stmt -> ; .)
    BREAK           reduce using rule 7 (stmt -> ; .)
    CONTINUE        reduce using rule 7 (stmt -> ; .)
    ;               reduce using rule 7 (stmt -> ; .)
    {               reduce using rule 7 (stmt -> ; .)
    PRINT           reduce using rule 7 (stmt -> ; .)
    IF              reduce using rule 7 (stmt -> ; .)
    WHILE           reduce using rule 7 (stmt -> ; .)
    FOR             reduce using rule 7 (stmt -> ; .)
    INTNUM          reduce using rule 7 (stmt -> ; .)
    FLOATNUM        reduce using rule 7 (stmt -> ; .)
    STR             reduce using rule 7 (stmt -> ; .)
    EYE             reduce using rule 7 (stmt -> ; .)
    ONES            reduce using rule 7 (stmt -> ; .)
    ZEROS           reduce using rule 7 (stmt -> ; .)
    SUB             reduce using rule 7 (stmt -> ; .)
    (               reduce using rule 7 (stmt -> ; .)
    [               reduce using rule 7 (stmt -> ; .)
    ID              reduce using rule 7 (stmt -> ; .)
    $end            reduce using rule 7 (stmt -> ; .)
    }               reduce using rule 7 (stmt -> ; .)
    ELSE            reduce using rule 7 (stmt -> ; .)


state 5

    (4) stmt -> RETURN . expr ;
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 42
    lvalue                         shift and go to state 22

state 6

    (5) stmt -> BREAK . ;

    ;               shift and go to state 43


state 7

    (6) stmt -> CONTINUE . ;

    ;               shift and go to state 44


state 8

    (8) stmt -> { . }
    (11) stmt -> { . stmt_list }
    (9) stmt_list -> . stmt
    (10) stmt_list -> . stmt_list stmt
    (3) stmt -> . expr ;
    (4) stmt -> . RETURN expr ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . CONTINUE ;
    (7) stmt -> . ;
    (8) stmt -> . { }
    (11) stmt -> . { stmt_list }
    (12) stmt -> . PRINT list ;
    (48) stmt -> . IF ( expr ) stmt
    (49) stmt -> . IF ( expr ) stmt ELSE stmt
    (50) stmt -> . WHILE ( expr ) stmt
    (52) stmt -> . FOR ID ASSIGN range stmt
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    }               shift and go to state 45
    RETURN          shift and go to state 5
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ;               shift and go to state 4
    {               shift and go to state 8
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    stmt_list                      shift and go to state 46
    stmt                           shift and go to state 47
    expr                           shift and go to state 3
    lvalue                         shift and go to state 22

state 9

    (12) stmt -> PRINT . list ;
    (46) list -> . expr
    (47) list -> . list , expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    list                           shift and go to state 48
    expr                           shift and go to state 49
    lvalue                         shift and go to state 22

state 10

    (48) stmt -> IF . ( expr ) stmt
    (49) stmt -> IF . ( expr ) stmt ELSE stmt

    (               shift and go to state 50


state 11

    (42) expr -> ( . expr )
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 51
    lvalue                         shift and go to state 22

state 12

    (50) stmt -> WHILE . ( expr ) stmt

    (               shift and go to state 52


state 13

    (52) stmt -> FOR . ID ASSIGN range stmt

    ID              shift and go to state 53


state 14

    (39) lvalue -> ID .

    ASSIGN          reduce using rule 39 (lvalue -> ID .)
    ADD_ASSIGN      reduce using rule 39 (lvalue -> ID .)
    SUB_ASSIGN      reduce using rule 39 (lvalue -> ID .)
    MUL_ASSIGN      reduce using rule 39 (lvalue -> ID .)
    DIV_ASSIGN      reduce using rule 39 (lvalue -> ID .)
    ;               reduce using rule 39 (lvalue -> ID .)
    ADD             reduce using rule 39 (lvalue -> ID .)
    SUB             reduce using rule 39 (lvalue -> ID .)
    MUL             reduce using rule 39 (lvalue -> ID .)
    DIV             reduce using rule 39 (lvalue -> ID .)
    DOT_ADD         reduce using rule 39 (lvalue -> ID .)
    DOT_SUB         reduce using rule 39 (lvalue -> ID .)
    DOT_MUL         reduce using rule 39 (lvalue -> ID .)
    DOT_DIV         reduce using rule 39 (lvalue -> ID .)
    GT              reduce using rule 39 (lvalue -> ID .)
    LT              reduce using rule 39 (lvalue -> ID .)
    GTE             reduce using rule 39 (lvalue -> ID .)
    LTE             reduce using rule 39 (lvalue -> ID .)
    EQ              reduce using rule 39 (lvalue -> ID .)
    NEQ             reduce using rule 39 (lvalue -> ID .)
    '               reduce using rule 39 (lvalue -> ID .)
    [               reduce using rule 39 (lvalue -> ID .)
    ,               reduce using rule 39 (lvalue -> ID .)
    )               reduce using rule 39 (lvalue -> ID .)
    ]               reduce using rule 39 (lvalue -> ID .)
    :               reduce using rule 39 (lvalue -> ID .)
    RETURN          reduce using rule 39 (lvalue -> ID .)
    BREAK           reduce using rule 39 (lvalue -> ID .)
    CONTINUE        reduce using rule 39 (lvalue -> ID .)
    {               reduce using rule 39 (lvalue -> ID .)
    PRINT           reduce using rule 39 (lvalue -> ID .)
    IF              reduce using rule 39 (lvalue -> ID .)
    WHILE           reduce using rule 39 (lvalue -> ID .)
    FOR             reduce using rule 39 (lvalue -> ID .)
    INTNUM          reduce using rule 39 (lvalue -> ID .)
    FLOATNUM        reduce using rule 39 (lvalue -> ID .)
    STR             reduce using rule 39 (lvalue -> ID .)
    EYE             reduce using rule 39 (lvalue -> ID .)
    ONES            reduce using rule 39 (lvalue -> ID .)
    ZEROS           reduce using rule 39 (lvalue -> ID .)
    (               reduce using rule 39 (lvalue -> ID .)
    ID              reduce using rule 39 (lvalue -> ID .)


state 15

    (13) expr -> INTNUM .

    ;               reduce using rule 13 (expr -> INTNUM .)
    ADD             reduce using rule 13 (expr -> INTNUM .)
    SUB             reduce using rule 13 (expr -> INTNUM .)
    MUL             reduce using rule 13 (expr -> INTNUM .)
    DIV             reduce using rule 13 (expr -> INTNUM .)
    DOT_ADD         reduce using rule 13 (expr -> INTNUM .)
    DOT_SUB         reduce using rule 13 (expr -> INTNUM .)
    DOT_MUL         reduce using rule 13 (expr -> INTNUM .)
    DOT_DIV         reduce using rule 13 (expr -> INTNUM .)
    GT              reduce using rule 13 (expr -> INTNUM .)
    LT              reduce using rule 13 (expr -> INTNUM .)
    GTE             reduce using rule 13 (expr -> INTNUM .)
    LTE             reduce using rule 13 (expr -> INTNUM .)
    EQ              reduce using rule 13 (expr -> INTNUM .)
    NEQ             reduce using rule 13 (expr -> INTNUM .)
    '               reduce using rule 13 (expr -> INTNUM .)
    [               reduce using rule 13 (expr -> INTNUM .)
    ,               reduce using rule 13 (expr -> INTNUM .)
    )               reduce using rule 13 (expr -> INTNUM .)
    ]               reduce using rule 13 (expr -> INTNUM .)
    :               reduce using rule 13 (expr -> INTNUM .)
    RETURN          reduce using rule 13 (expr -> INTNUM .)
    BREAK           reduce using rule 13 (expr -> INTNUM .)
    CONTINUE        reduce using rule 13 (expr -> INTNUM .)
    {               reduce using rule 13 (expr -> INTNUM .)
    PRINT           reduce using rule 13 (expr -> INTNUM .)
    IF              reduce using rule 13 (expr -> INTNUM .)
    WHILE           reduce using rule 13 (expr -> INTNUM .)
    FOR             reduce using rule 13 (expr -> INTNUM .)
    INTNUM          reduce using rule 13 (expr -> INTNUM .)
    FLOATNUM        reduce using rule 13 (expr -> INTNUM .)
    STR             reduce using rule 13 (expr -> INTNUM .)
    EYE             reduce using rule 13 (expr -> INTNUM .)
    ONES            reduce using rule 13 (expr -> INTNUM .)
    ZEROS           reduce using rule 13 (expr -> INTNUM .)
    (               reduce using rule 13 (expr -> INTNUM .)
    ID              reduce using rule 13 (expr -> INTNUM .)


state 16

    (14) expr -> FLOATNUM .

    ;               reduce using rule 14 (expr -> FLOATNUM .)
    ADD             reduce using rule 14 (expr -> FLOATNUM .)
    SUB             reduce using rule 14 (expr -> FLOATNUM .)
    MUL             reduce using rule 14 (expr -> FLOATNUM .)
    DIV             reduce using rule 14 (expr -> FLOATNUM .)
    DOT_ADD         reduce using rule 14 (expr -> FLOATNUM .)
    DOT_SUB         reduce using rule 14 (expr -> FLOATNUM .)
    DOT_MUL         reduce using rule 14 (expr -> FLOATNUM .)
    DOT_DIV         reduce using rule 14 (expr -> FLOATNUM .)
    GT              reduce using rule 14 (expr -> FLOATNUM .)
    LT              reduce using rule 14 (expr -> FLOATNUM .)
    GTE             reduce using rule 14 (expr -> FLOATNUM .)
    LTE             reduce using rule 14 (expr -> FLOATNUM .)
    EQ              reduce using rule 14 (expr -> FLOATNUM .)
    NEQ             reduce using rule 14 (expr -> FLOATNUM .)
    '               reduce using rule 14 (expr -> FLOATNUM .)
    [               reduce using rule 14 (expr -> FLOATNUM .)
    ,               reduce using rule 14 (expr -> FLOATNUM .)
    )               reduce using rule 14 (expr -> FLOATNUM .)
    ]               reduce using rule 14 (expr -> FLOATNUM .)
    :               reduce using rule 14 (expr -> FLOATNUM .)
    RETURN          reduce using rule 14 (expr -> FLOATNUM .)
    BREAK           reduce using rule 14 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 14 (expr -> FLOATNUM .)
    {               reduce using rule 14 (expr -> FLOATNUM .)
    PRINT           reduce using rule 14 (expr -> FLOATNUM .)
    IF              reduce using rule 14 (expr -> FLOATNUM .)
    WHILE           reduce using rule 14 (expr -> FLOATNUM .)
    FOR             reduce using rule 14 (expr -> FLOATNUM .)
    INTNUM          reduce using rule 14 (expr -> FLOATNUM .)
    FLOATNUM        reduce using rule 14 (expr -> FLOATNUM .)
    STR             reduce using rule 14 (expr -> FLOATNUM .)
    EYE             reduce using rule 14 (expr -> FLOATNUM .)
    ONES            reduce using rule 14 (expr -> FLOATNUM .)
    ZEROS           reduce using rule 14 (expr -> FLOATNUM .)
    (               reduce using rule 14 (expr -> FLOATNUM .)
    ID              reduce using rule 14 (expr -> FLOATNUM .)


state 17

    (15) expr -> STR .

    ;               reduce using rule 15 (expr -> STR .)
    ADD             reduce using rule 15 (expr -> STR .)
    SUB             reduce using rule 15 (expr -> STR .)
    MUL             reduce using rule 15 (expr -> STR .)
    DIV             reduce using rule 15 (expr -> STR .)
    DOT_ADD         reduce using rule 15 (expr -> STR .)
    DOT_SUB         reduce using rule 15 (expr -> STR .)
    DOT_MUL         reduce using rule 15 (expr -> STR .)
    DOT_DIV         reduce using rule 15 (expr -> STR .)
    GT              reduce using rule 15 (expr -> STR .)
    LT              reduce using rule 15 (expr -> STR .)
    GTE             reduce using rule 15 (expr -> STR .)
    LTE             reduce using rule 15 (expr -> STR .)
    EQ              reduce using rule 15 (expr -> STR .)
    NEQ             reduce using rule 15 (expr -> STR .)
    '               reduce using rule 15 (expr -> STR .)
    [               reduce using rule 15 (expr -> STR .)
    ,               reduce using rule 15 (expr -> STR .)
    )               reduce using rule 15 (expr -> STR .)
    ]               reduce using rule 15 (expr -> STR .)
    :               reduce using rule 15 (expr -> STR .)
    RETURN          reduce using rule 15 (expr -> STR .)
    BREAK           reduce using rule 15 (expr -> STR .)
    CONTINUE        reduce using rule 15 (expr -> STR .)
    {               reduce using rule 15 (expr -> STR .)
    PRINT           reduce using rule 15 (expr -> STR .)
    IF              reduce using rule 15 (expr -> STR .)
    WHILE           reduce using rule 15 (expr -> STR .)
    FOR             reduce using rule 15 (expr -> STR .)
    INTNUM          reduce using rule 15 (expr -> STR .)
    FLOATNUM        reduce using rule 15 (expr -> STR .)
    STR             reduce using rule 15 (expr -> STR .)
    EYE             reduce using rule 15 (expr -> STR .)
    ONES            reduce using rule 15 (expr -> STR .)
    ZEROS           reduce using rule 15 (expr -> STR .)
    (               reduce using rule 15 (expr -> STR .)
    ID              reduce using rule 15 (expr -> STR .)


state 18

    (40) expr -> SUB . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 54
    lvalue                         shift and go to state 22

state 19

    (30) expr -> EYE . ( expr )

    (               shift and go to state 55


state 20

    (31) expr -> ONES . ( expr )

    (               shift and go to state 56


state 21

    (32) expr -> ZEROS . ( expr )

    (               shift and go to state 57


state 22

    (33) expr -> lvalue . ASSIGN expr
    (34) expr -> lvalue . ADD_ASSIGN expr
    (35) expr -> lvalue . SUB_ASSIGN expr
    (36) expr -> lvalue . MUL_ASSIGN expr
    (37) expr -> lvalue . DIV_ASSIGN expr
    (41) expr -> lvalue .

    ASSIGN          shift and go to state 58
    ADD_ASSIGN      shift and go to state 59
    SUB_ASSIGN      shift and go to state 60
    MUL_ASSIGN      shift and go to state 61
    DIV_ASSIGN      shift and go to state 62
    ;               reduce using rule 41 (expr -> lvalue .)
    ADD             reduce using rule 41 (expr -> lvalue .)
    SUB             reduce using rule 41 (expr -> lvalue .)
    MUL             reduce using rule 41 (expr -> lvalue .)
    DIV             reduce using rule 41 (expr -> lvalue .)
    DOT_ADD         reduce using rule 41 (expr -> lvalue .)
    DOT_SUB         reduce using rule 41 (expr -> lvalue .)
    DOT_MUL         reduce using rule 41 (expr -> lvalue .)
    DOT_DIV         reduce using rule 41 (expr -> lvalue .)
    GT              reduce using rule 41 (expr -> lvalue .)
    LT              reduce using rule 41 (expr -> lvalue .)
    GTE             reduce using rule 41 (expr -> lvalue .)
    LTE             reduce using rule 41 (expr -> lvalue .)
    EQ              reduce using rule 41 (expr -> lvalue .)
    NEQ             reduce using rule 41 (expr -> lvalue .)
    '               reduce using rule 41 (expr -> lvalue .)
    [               reduce using rule 41 (expr -> lvalue .)
    ,               reduce using rule 41 (expr -> lvalue .)
    )               reduce using rule 41 (expr -> lvalue .)
    ]               reduce using rule 41 (expr -> lvalue .)
    :               reduce using rule 41 (expr -> lvalue .)
    RETURN          reduce using rule 41 (expr -> lvalue .)
    BREAK           reduce using rule 41 (expr -> lvalue .)
    CONTINUE        reduce using rule 41 (expr -> lvalue .)
    {               reduce using rule 41 (expr -> lvalue .)
    PRINT           reduce using rule 41 (expr -> lvalue .)
    IF              reduce using rule 41 (expr -> lvalue .)
    WHILE           reduce using rule 41 (expr -> lvalue .)
    FOR             reduce using rule 41 (expr -> lvalue .)
    INTNUM          reduce using rule 41 (expr -> lvalue .)
    FLOATNUM        reduce using rule 41 (expr -> lvalue .)
    STR             reduce using rule 41 (expr -> lvalue .)
    EYE             reduce using rule 41 (expr -> lvalue .)
    ONES            reduce using rule 41 (expr -> lvalue .)
    ZEROS           reduce using rule 41 (expr -> lvalue .)
    (               reduce using rule 41 (expr -> lvalue .)
    ID              reduce using rule 41 (expr -> lvalue .)


state 23

    (44) expr -> [ . ]
    (45) expr -> [ . list ]
    (46) list -> . expr
    (47) list -> . list , expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    ]               shift and go to state 63
    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    list                           shift and go to state 64
    expr                           shift and go to state 49
    lvalue                         shift and go to state 22

state 24

    (2) program -> program stmt .

    RETURN          reduce using rule 2 (program -> program stmt .)
    BREAK           reduce using rule 2 (program -> program stmt .)
    CONTINUE        reduce using rule 2 (program -> program stmt .)
    ;               reduce using rule 2 (program -> program stmt .)
    {               reduce using rule 2 (program -> program stmt .)
    PRINT           reduce using rule 2 (program -> program stmt .)
    IF              reduce using rule 2 (program -> program stmt .)
    WHILE           reduce using rule 2 (program -> program stmt .)
    FOR             reduce using rule 2 (program -> program stmt .)
    INTNUM          reduce using rule 2 (program -> program stmt .)
    FLOATNUM        reduce using rule 2 (program -> program stmt .)
    STR             reduce using rule 2 (program -> program stmt .)
    EYE             reduce using rule 2 (program -> program stmt .)
    ONES            reduce using rule 2 (program -> program stmt .)
    ZEROS           reduce using rule 2 (program -> program stmt .)
    SUB             reduce using rule 2 (program -> program stmt .)
    (               reduce using rule 2 (program -> program stmt .)
    [               reduce using rule 2 (program -> program stmt .)
    ID              reduce using rule 2 (program -> program stmt .)
    $end            reduce using rule 2 (program -> program stmt .)


state 25

    (3) stmt -> expr ; .

    RETURN          reduce using rule 3 (stmt -> expr ; .)
    BREAK           reduce using rule 3 (stmt -> expr ; .)
    CONTINUE        reduce using rule 3 (stmt -> expr ; .)
    ;               reduce using rule 3 (stmt -> expr ; .)
    {               reduce using rule 3 (stmt -> expr ; .)
    PRINT           reduce using rule 3 (stmt -> expr ; .)
    IF              reduce using rule 3 (stmt -> expr ; .)
    WHILE           reduce using rule 3 (stmt -> expr ; .)
    FOR             reduce using rule 3 (stmt -> expr ; .)
    INTNUM          reduce using rule 3 (stmt -> expr ; .)
    FLOATNUM        reduce using rule 3 (stmt -> expr ; .)
    STR             reduce using rule 3 (stmt -> expr ; .)
    EYE             reduce using rule 3 (stmt -> expr ; .)
    ONES            reduce using rule 3 (stmt -> expr ; .)
    ZEROS           reduce using rule 3 (stmt -> expr ; .)
    SUB             reduce using rule 3 (stmt -> expr ; .)
    (               reduce using rule 3 (stmt -> expr ; .)
    [               reduce using rule 3 (stmt -> expr ; .)
    ID              reduce using rule 3 (stmt -> expr ; .)
    $end            reduce using rule 3 (stmt -> expr ; .)
    }               reduce using rule 3 (stmt -> expr ; .)
    ELSE            reduce using rule 3 (stmt -> expr ; .)


state 26

    (16) expr -> expr ADD . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 65
    lvalue                         shift and go to state 22

state 27

    (17) expr -> expr SUB . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 66
    lvalue                         shift and go to state 22

state 28

    (18) expr -> expr MUL . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 67
    lvalue                         shift and go to state 22

state 29

    (19) expr -> expr DIV . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 68
    lvalue                         shift and go to state 22

state 30

    (20) expr -> expr DOT_ADD . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 69
    lvalue                         shift and go to state 22

state 31

    (21) expr -> expr DOT_SUB . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 70
    lvalue                         shift and go to state 22

state 32

    (22) expr -> expr DOT_MUL . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 71
    lvalue                         shift and go to state 22

state 33

    (23) expr -> expr DOT_DIV . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 72
    lvalue                         shift and go to state 22

state 34

    (24) expr -> expr GT . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 73
    lvalue                         shift and go to state 22

state 35

    (25) expr -> expr LT . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 74
    lvalue                         shift and go to state 22

state 36

    (26) expr -> expr GTE . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 75
    lvalue                         shift and go to state 22

state 37

    (27) expr -> expr LTE . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 76
    lvalue                         shift and go to state 22

state 38

    (28) expr -> expr EQ . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 77
    lvalue                         shift and go to state 22

state 39

    (29) expr -> expr NEQ . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 78
    lvalue                         shift and go to state 22

state 40

    (38) expr -> expr ' .

    ;               reduce using rule 38 (expr -> expr ' .)
    ADD             reduce using rule 38 (expr -> expr ' .)
    SUB             reduce using rule 38 (expr -> expr ' .)
    MUL             reduce using rule 38 (expr -> expr ' .)
    DIV             reduce using rule 38 (expr -> expr ' .)
    DOT_ADD         reduce using rule 38 (expr -> expr ' .)
    DOT_SUB         reduce using rule 38 (expr -> expr ' .)
    DOT_MUL         reduce using rule 38 (expr -> expr ' .)
    DOT_DIV         reduce using rule 38 (expr -> expr ' .)
    GT              reduce using rule 38 (expr -> expr ' .)
    LT              reduce using rule 38 (expr -> expr ' .)
    GTE             reduce using rule 38 (expr -> expr ' .)
    LTE             reduce using rule 38 (expr -> expr ' .)
    EQ              reduce using rule 38 (expr -> expr ' .)
    NEQ             reduce using rule 38 (expr -> expr ' .)
    '               reduce using rule 38 (expr -> expr ' .)
    [               reduce using rule 38 (expr -> expr ' .)
    ,               reduce using rule 38 (expr -> expr ' .)
    )               reduce using rule 38 (expr -> expr ' .)
    ]               reduce using rule 38 (expr -> expr ' .)
    :               reduce using rule 38 (expr -> expr ' .)
    RETURN          reduce using rule 38 (expr -> expr ' .)
    BREAK           reduce using rule 38 (expr -> expr ' .)
    CONTINUE        reduce using rule 38 (expr -> expr ' .)
    {               reduce using rule 38 (expr -> expr ' .)
    PRINT           reduce using rule 38 (expr -> expr ' .)
    IF              reduce using rule 38 (expr -> expr ' .)
    WHILE           reduce using rule 38 (expr -> expr ' .)
    FOR             reduce using rule 38 (expr -> expr ' .)
    INTNUM          reduce using rule 38 (expr -> expr ' .)
    FLOATNUM        reduce using rule 38 (expr -> expr ' .)
    STR             reduce using rule 38 (expr -> expr ' .)
    EYE             reduce using rule 38 (expr -> expr ' .)
    ONES            reduce using rule 38 (expr -> expr ' .)
    ZEROS           reduce using rule 38 (expr -> expr ' .)
    (               reduce using rule 38 (expr -> expr ' .)
    ID              reduce using rule 38 (expr -> expr ' .)


state 41

    (43) lvalue -> expr [ . list ]
    (46) list -> . expr
    (47) list -> . list , expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 49
    list                           shift and go to state 79
    lvalue                         shift and go to state 22

state 42

    (4) stmt -> RETURN expr . ;
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               shift and go to state 80
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40
    [               shift and go to state 41


state 43

    (5) stmt -> BREAK ; .

    RETURN          reduce using rule 5 (stmt -> BREAK ; .)
    BREAK           reduce using rule 5 (stmt -> BREAK ; .)
    CONTINUE        reduce using rule 5 (stmt -> BREAK ; .)
    ;               reduce using rule 5 (stmt -> BREAK ; .)
    {               reduce using rule 5 (stmt -> BREAK ; .)
    PRINT           reduce using rule 5 (stmt -> BREAK ; .)
    IF              reduce using rule 5 (stmt -> BREAK ; .)
    WHILE           reduce using rule 5 (stmt -> BREAK ; .)
    FOR             reduce using rule 5 (stmt -> BREAK ; .)
    INTNUM          reduce using rule 5 (stmt -> BREAK ; .)
    FLOATNUM        reduce using rule 5 (stmt -> BREAK ; .)
    STR             reduce using rule 5 (stmt -> BREAK ; .)
    EYE             reduce using rule 5 (stmt -> BREAK ; .)
    ONES            reduce using rule 5 (stmt -> BREAK ; .)
    ZEROS           reduce using rule 5 (stmt -> BREAK ; .)
    SUB             reduce using rule 5 (stmt -> BREAK ; .)
    (               reduce using rule 5 (stmt -> BREAK ; .)
    [               reduce using rule 5 (stmt -> BREAK ; .)
    ID              reduce using rule 5 (stmt -> BREAK ; .)
    $end            reduce using rule 5 (stmt -> BREAK ; .)
    }               reduce using rule 5 (stmt -> BREAK ; .)
    ELSE            reduce using rule 5 (stmt -> BREAK ; .)


state 44

    (6) stmt -> CONTINUE ; .

    RETURN          reduce using rule 6 (stmt -> CONTINUE ; .)
    BREAK           reduce using rule 6 (stmt -> CONTINUE ; .)
    CONTINUE        reduce using rule 6 (stmt -> CONTINUE ; .)
    ;               reduce using rule 6 (stmt -> CONTINUE ; .)
    {               reduce using rule 6 (stmt -> CONTINUE ; .)
    PRINT           reduce using rule 6 (stmt -> CONTINUE ; .)
    IF              reduce using rule 6 (stmt -> CONTINUE ; .)
    WHILE           reduce using rule 6 (stmt -> CONTINUE ; .)
    FOR             reduce using rule 6 (stmt -> CONTINUE ; .)
    INTNUM          reduce using rule 6 (stmt -> CONTINUE ; .)
    FLOATNUM        reduce using rule 6 (stmt -> CONTINUE ; .)
    STR             reduce using rule 6 (stmt -> CONTINUE ; .)
    EYE             reduce using rule 6 (stmt -> CONTINUE ; .)
    ONES            reduce using rule 6 (stmt -> CONTINUE ; .)
    ZEROS           reduce using rule 6 (stmt -> CONTINUE ; .)
    SUB             reduce using rule 6 (stmt -> CONTINUE ; .)
    (               reduce using rule 6 (stmt -> CONTINUE ; .)
    [               reduce using rule 6 (stmt -> CONTINUE ; .)
    ID              reduce using rule 6 (stmt -> CONTINUE ; .)
    $end            reduce using rule 6 (stmt -> CONTINUE ; .)
    }               reduce using rule 6 (stmt -> CONTINUE ; .)
    ELSE            reduce using rule 6 (stmt -> CONTINUE ; .)


state 45

    (8) stmt -> { } .

    RETURN          reduce using rule 8 (stmt -> { } .)
    BREAK           reduce using rule 8 (stmt -> { } .)
    CONTINUE        reduce using rule 8 (stmt -> { } .)
    ;               reduce using rule 8 (stmt -> { } .)
    {               reduce using rule 8 (stmt -> { } .)
    PRINT           reduce using rule 8 (stmt -> { } .)
    IF              reduce using rule 8 (stmt -> { } .)
    WHILE           reduce using rule 8 (stmt -> { } .)
    FOR             reduce using rule 8 (stmt -> { } .)
    INTNUM          reduce using rule 8 (stmt -> { } .)
    FLOATNUM        reduce using rule 8 (stmt -> { } .)
    STR             reduce using rule 8 (stmt -> { } .)
    EYE             reduce using rule 8 (stmt -> { } .)
    ONES            reduce using rule 8 (stmt -> { } .)
    ZEROS           reduce using rule 8 (stmt -> { } .)
    SUB             reduce using rule 8 (stmt -> { } .)
    (               reduce using rule 8 (stmt -> { } .)
    [               reduce using rule 8 (stmt -> { } .)
    ID              reduce using rule 8 (stmt -> { } .)
    $end            reduce using rule 8 (stmt -> { } .)
    }               reduce using rule 8 (stmt -> { } .)
    ELSE            reduce using rule 8 (stmt -> { } .)


state 46

    (11) stmt -> { stmt_list . }
    (10) stmt_list -> stmt_list . stmt
    (3) stmt -> . expr ;
    (4) stmt -> . RETURN expr ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . CONTINUE ;
    (7) stmt -> . ;
    (8) stmt -> . { }
    (11) stmt -> . { stmt_list }
    (12) stmt -> . PRINT list ;
    (48) stmt -> . IF ( expr ) stmt
    (49) stmt -> . IF ( expr ) stmt ELSE stmt
    (50) stmt -> . WHILE ( expr ) stmt
    (52) stmt -> . FOR ID ASSIGN range stmt
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    }               shift and go to state 81
    RETURN          shift and go to state 5
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ;               shift and go to state 4
    {               shift and go to state 8
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    stmt                           shift and go to state 82
    expr                           shift and go to state 3
    lvalue                         shift and go to state 22

state 47

    (9) stmt_list -> stmt .

    }               reduce using rule 9 (stmt_list -> stmt .)
    RETURN          reduce using rule 9 (stmt_list -> stmt .)
    BREAK           reduce using rule 9 (stmt_list -> stmt .)
    CONTINUE        reduce using rule 9 (stmt_list -> stmt .)
    ;               reduce using rule 9 (stmt_list -> stmt .)
    {               reduce using rule 9 (stmt_list -> stmt .)
    PRINT           reduce using rule 9 (stmt_list -> stmt .)
    IF              reduce using rule 9 (stmt_list -> stmt .)
    WHILE           reduce using rule 9 (stmt_list -> stmt .)
    FOR             reduce using rule 9 (stmt_list -> stmt .)
    INTNUM          reduce using rule 9 (stmt_list -> stmt .)
    FLOATNUM        reduce using rule 9 (stmt_list -> stmt .)
    STR             reduce using rule 9 (stmt_list -> stmt .)
    EYE             reduce using rule 9 (stmt_list -> stmt .)
    ONES            reduce using rule 9 (stmt_list -> stmt .)
    ZEROS           reduce using rule 9 (stmt_list -> stmt .)
    SUB             reduce using rule 9 (stmt_list -> stmt .)
    (               reduce using rule 9 (stmt_list -> stmt .)
    [               reduce using rule 9 (stmt_list -> stmt .)
    ID              reduce using rule 9 (stmt_list -> stmt .)


state 48

    (12) stmt -> PRINT list . ;
    (47) list -> list . , expr

    ;               shift and go to state 83
    ,               shift and go to state 84


state 49

    (46) list -> expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 46 (list -> expr .)
    ,               reduce using rule 46 (list -> expr .)
    ]               reduce using rule 46 (list -> expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40
    [               shift and go to state 41


state 50

    (48) stmt -> IF ( . expr ) stmt
    (49) stmt -> IF ( . expr ) stmt ELSE stmt
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 85
    lvalue                         shift and go to state 22

state 51

    (42) expr -> ( expr . )
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    )               shift and go to state 86
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40
    [               shift and go to state 41


state 52

    (50) stmt -> WHILE ( . expr ) stmt
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 87
    lvalue                         shift and go to state 22

state 53

    (52) stmt -> FOR ID . ASSIGN range stmt

    ASSIGN          shift and go to state 88


state 54

    (40) expr -> SUB expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 40 (expr -> SUB expr .)
    ADD             reduce using rule 40 (expr -> SUB expr .)
    SUB             reduce using rule 40 (expr -> SUB expr .)
    MUL             reduce using rule 40 (expr -> SUB expr .)
    DIV             reduce using rule 40 (expr -> SUB expr .)
    DOT_ADD         reduce using rule 40 (expr -> SUB expr .)
    DOT_SUB         reduce using rule 40 (expr -> SUB expr .)
    DOT_MUL         reduce using rule 40 (expr -> SUB expr .)
    DOT_DIV         reduce using rule 40 (expr -> SUB expr .)
    GT              reduce using rule 40 (expr -> SUB expr .)
    LT              reduce using rule 40 (expr -> SUB expr .)
    GTE             reduce using rule 40 (expr -> SUB expr .)
    LTE             reduce using rule 40 (expr -> SUB expr .)
    EQ              reduce using rule 40 (expr -> SUB expr .)
    NEQ             reduce using rule 40 (expr -> SUB expr .)
    '               reduce using rule 40 (expr -> SUB expr .)
    [               reduce using rule 40 (expr -> SUB expr .)
    ,               reduce using rule 40 (expr -> SUB expr .)
    )               reduce using rule 40 (expr -> SUB expr .)
    ]               reduce using rule 40 (expr -> SUB expr .)
    :               reduce using rule 40 (expr -> SUB expr .)
    RETURN          reduce using rule 40 (expr -> SUB expr .)
    BREAK           reduce using rule 40 (expr -> SUB expr .)
    CONTINUE        reduce using rule 40 (expr -> SUB expr .)
    {               reduce using rule 40 (expr -> SUB expr .)
    PRINT           reduce using rule 40 (expr -> SUB expr .)
    IF              reduce using rule 40 (expr -> SUB expr .)
    WHILE           reduce using rule 40 (expr -> SUB expr .)
    FOR             reduce using rule 40 (expr -> SUB expr .)
    INTNUM          reduce using rule 40 (expr -> SUB expr .)
    FLOATNUM        reduce using rule 40 (expr -> SUB expr .)
    STR             reduce using rule 40 (expr -> SUB expr .)
    EYE             reduce using rule 40 (expr -> SUB expr .)
    ONES            reduce using rule 40 (expr -> SUB expr .)
    ZEROS           reduce using rule 40 (expr -> SUB expr .)
    (               reduce using rule 40 (expr -> SUB expr .)
    ID              reduce using rule 40 (expr -> SUB expr .)

  ! ADD             [ shift and go to state 26 ]
  ! SUB             [ shift and go to state 27 ]
  ! MUL             [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 29 ]
  ! DOT_ADD         [ shift and go to state 30 ]
  ! DOT_SUB         [ shift and go to state 31 ]
  ! DOT_MUL         [ shift and go to state 32 ]
  ! DOT_DIV         [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! '               [ shift and go to state 40 ]
  ! [               [ shift and go to state 41 ]


state 55

    (30) expr -> EYE ( . expr )
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 89
    lvalue                         shift and go to state 22

state 56

    (31) expr -> ONES ( . expr )
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 90
    lvalue                         shift and go to state 22

state 57

    (32) expr -> ZEROS ( . expr )
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 91
    lvalue                         shift and go to state 22

state 58

    (33) expr -> lvalue ASSIGN . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    lvalue                         shift and go to state 22
    expr                           shift and go to state 92

state 59

    (34) expr -> lvalue ADD_ASSIGN . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    lvalue                         shift and go to state 22
    expr                           shift and go to state 93

state 60

    (35) expr -> lvalue SUB_ASSIGN . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    lvalue                         shift and go to state 22
    expr                           shift and go to state 94

state 61

    (36) expr -> lvalue MUL_ASSIGN . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    lvalue                         shift and go to state 22
    expr                           shift and go to state 95

state 62

    (37) expr -> lvalue DIV_ASSIGN . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    lvalue                         shift and go to state 22
    expr                           shift and go to state 96

state 63

    (44) expr -> [ ] .

    ;               reduce using rule 44 (expr -> [ ] .)
    ADD             reduce using rule 44 (expr -> [ ] .)
    SUB             reduce using rule 44 (expr -> [ ] .)
    MUL             reduce using rule 44 (expr -> [ ] .)
    DIV             reduce using rule 44 (expr -> [ ] .)
    DOT_ADD         reduce using rule 44 (expr -> [ ] .)
    DOT_SUB         reduce using rule 44 (expr -> [ ] .)
    DOT_MUL         reduce using rule 44 (expr -> [ ] .)
    DOT_DIV         reduce using rule 44 (expr -> [ ] .)
    GT              reduce using rule 44 (expr -> [ ] .)
    LT              reduce using rule 44 (expr -> [ ] .)
    GTE             reduce using rule 44 (expr -> [ ] .)
    LTE             reduce using rule 44 (expr -> [ ] .)
    EQ              reduce using rule 44 (expr -> [ ] .)
    NEQ             reduce using rule 44 (expr -> [ ] .)
    '               reduce using rule 44 (expr -> [ ] .)
    [               reduce using rule 44 (expr -> [ ] .)
    ,               reduce using rule 44 (expr -> [ ] .)
    )               reduce using rule 44 (expr -> [ ] .)
    ]               reduce using rule 44 (expr -> [ ] .)
    :               reduce using rule 44 (expr -> [ ] .)
    RETURN          reduce using rule 44 (expr -> [ ] .)
    BREAK           reduce using rule 44 (expr -> [ ] .)
    CONTINUE        reduce using rule 44 (expr -> [ ] .)
    {               reduce using rule 44 (expr -> [ ] .)
    PRINT           reduce using rule 44 (expr -> [ ] .)
    IF              reduce using rule 44 (expr -> [ ] .)
    WHILE           reduce using rule 44 (expr -> [ ] .)
    FOR             reduce using rule 44 (expr -> [ ] .)
    INTNUM          reduce using rule 44 (expr -> [ ] .)
    FLOATNUM        reduce using rule 44 (expr -> [ ] .)
    STR             reduce using rule 44 (expr -> [ ] .)
    EYE             reduce using rule 44 (expr -> [ ] .)
    ONES            reduce using rule 44 (expr -> [ ] .)
    ZEROS           reduce using rule 44 (expr -> [ ] .)
    (               reduce using rule 44 (expr -> [ ] .)
    ID              reduce using rule 44 (expr -> [ ] .)


state 64

    (45) expr -> [ list . ]
    (47) list -> list . , expr

    ]               shift and go to state 97
    ,               shift and go to state 84


state 65

    (16) expr -> expr ADD expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 16 (expr -> expr ADD expr .)
    ADD             reduce using rule 16 (expr -> expr ADD expr .)
    SUB             reduce using rule 16 (expr -> expr ADD expr .)
    DOT_ADD         reduce using rule 16 (expr -> expr ADD expr .)
    DOT_SUB         reduce using rule 16 (expr -> expr ADD expr .)
    GT              reduce using rule 16 (expr -> expr ADD expr .)
    LT              reduce using rule 16 (expr -> expr ADD expr .)
    GTE             reduce using rule 16 (expr -> expr ADD expr .)
    LTE             reduce using rule 16 (expr -> expr ADD expr .)
    EQ              reduce using rule 16 (expr -> expr ADD expr .)
    NEQ             reduce using rule 16 (expr -> expr ADD expr .)
    [               reduce using rule 16 (expr -> expr ADD expr .)
    ,               reduce using rule 16 (expr -> expr ADD expr .)
    )               reduce using rule 16 (expr -> expr ADD expr .)
    ]               reduce using rule 16 (expr -> expr ADD expr .)
    :               reduce using rule 16 (expr -> expr ADD expr .)
    RETURN          reduce using rule 16 (expr -> expr ADD expr .)
    BREAK           reduce using rule 16 (expr -> expr ADD expr .)
    CONTINUE        reduce using rule 16 (expr -> expr ADD expr .)
    {               reduce using rule 16 (expr -> expr ADD expr .)
    PRINT           reduce using rule 16 (expr -> expr ADD expr .)
    IF              reduce using rule 16 (expr -> expr ADD expr .)
    WHILE           reduce using rule 16 (expr -> expr ADD expr .)
    FOR             reduce using rule 16 (expr -> expr ADD expr .)
    INTNUM          reduce using rule 16 (expr -> expr ADD expr .)
    FLOATNUM        reduce using rule 16 (expr -> expr ADD expr .)
    STR             reduce using rule 16 (expr -> expr ADD expr .)
    EYE             reduce using rule 16 (expr -> expr ADD expr .)
    ONES            reduce using rule 16 (expr -> expr ADD expr .)
    ZEROS           reduce using rule 16 (expr -> expr ADD expr .)
    (               reduce using rule 16 (expr -> expr ADD expr .)
    ID              reduce using rule 16 (expr -> expr ADD expr .)
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    '               shift and go to state 40

  ! MUL             [ reduce using rule 16 (expr -> expr ADD expr .) ]
  ! DIV             [ reduce using rule 16 (expr -> expr ADD expr .) ]
  ! DOT_MUL         [ reduce using rule 16 (expr -> expr ADD expr .) ]
  ! DOT_DIV         [ reduce using rule 16 (expr -> expr ADD expr .) ]
  ! '               [ reduce using rule 16 (expr -> expr ADD expr .) ]
  ! ADD             [ shift and go to state 26 ]
  ! SUB             [ shift and go to state 27 ]
  ! DOT_ADD         [ shift and go to state 30 ]
  ! DOT_SUB         [ shift and go to state 31 ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 66

    (17) expr -> expr SUB expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 17 (expr -> expr SUB expr .)
    ADD             reduce using rule 17 (expr -> expr SUB expr .)
    SUB             reduce using rule 17 (expr -> expr SUB expr .)
    DOT_ADD         reduce using rule 17 (expr -> expr SUB expr .)
    DOT_SUB         reduce using rule 17 (expr -> expr SUB expr .)
    GT              reduce using rule 17 (expr -> expr SUB expr .)
    LT              reduce using rule 17 (expr -> expr SUB expr .)
    GTE             reduce using rule 17 (expr -> expr SUB expr .)
    LTE             reduce using rule 17 (expr -> expr SUB expr .)
    EQ              reduce using rule 17 (expr -> expr SUB expr .)
    NEQ             reduce using rule 17 (expr -> expr SUB expr .)
    [               reduce using rule 17 (expr -> expr SUB expr .)
    ,               reduce using rule 17 (expr -> expr SUB expr .)
    )               reduce using rule 17 (expr -> expr SUB expr .)
    ]               reduce using rule 17 (expr -> expr SUB expr .)
    :               reduce using rule 17 (expr -> expr SUB expr .)
    RETURN          reduce using rule 17 (expr -> expr SUB expr .)
    BREAK           reduce using rule 17 (expr -> expr SUB expr .)
    CONTINUE        reduce using rule 17 (expr -> expr SUB expr .)
    {               reduce using rule 17 (expr -> expr SUB expr .)
    PRINT           reduce using rule 17 (expr -> expr SUB expr .)
    IF              reduce using rule 17 (expr -> expr SUB expr .)
    WHILE           reduce using rule 17 (expr -> expr SUB expr .)
    FOR             reduce using rule 17 (expr -> expr SUB expr .)
    INTNUM          reduce using rule 17 (expr -> expr SUB expr .)
    FLOATNUM        reduce using rule 17 (expr -> expr SUB expr .)
    STR             reduce using rule 17 (expr -> expr SUB expr .)
    EYE             reduce using rule 17 (expr -> expr SUB expr .)
    ONES            reduce using rule 17 (expr -> expr SUB expr .)
    ZEROS           reduce using rule 17 (expr -> expr SUB expr .)
    (               reduce using rule 17 (expr -> expr SUB expr .)
    ID              reduce using rule 17 (expr -> expr SUB expr .)
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    '               shift and go to state 40

  ! MUL             [ reduce using rule 17 (expr -> expr SUB expr .) ]
  ! DIV             [ reduce using rule 17 (expr -> expr SUB expr .) ]
  ! DOT_MUL         [ reduce using rule 17 (expr -> expr SUB expr .) ]
  ! DOT_DIV         [ reduce using rule 17 (expr -> expr SUB expr .) ]
  ! '               [ reduce using rule 17 (expr -> expr SUB expr .) ]
  ! ADD             [ shift and go to state 26 ]
  ! SUB             [ shift and go to state 27 ]
  ! DOT_ADD         [ shift and go to state 30 ]
  ! DOT_SUB         [ shift and go to state 31 ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 67

    (18) expr -> expr MUL expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 18 (expr -> expr MUL expr .)
    ADD             reduce using rule 18 (expr -> expr MUL expr .)
    SUB             reduce using rule 18 (expr -> expr MUL expr .)
    MUL             reduce using rule 18 (expr -> expr MUL expr .)
    DIV             reduce using rule 18 (expr -> expr MUL expr .)
    DOT_ADD         reduce using rule 18 (expr -> expr MUL expr .)
    DOT_SUB         reduce using rule 18 (expr -> expr MUL expr .)
    DOT_MUL         reduce using rule 18 (expr -> expr MUL expr .)
    DOT_DIV         reduce using rule 18 (expr -> expr MUL expr .)
    GT              reduce using rule 18 (expr -> expr MUL expr .)
    LT              reduce using rule 18 (expr -> expr MUL expr .)
    GTE             reduce using rule 18 (expr -> expr MUL expr .)
    LTE             reduce using rule 18 (expr -> expr MUL expr .)
    EQ              reduce using rule 18 (expr -> expr MUL expr .)
    NEQ             reduce using rule 18 (expr -> expr MUL expr .)
    [               reduce using rule 18 (expr -> expr MUL expr .)
    ,               reduce using rule 18 (expr -> expr MUL expr .)
    )               reduce using rule 18 (expr -> expr MUL expr .)
    ]               reduce using rule 18 (expr -> expr MUL expr .)
    :               reduce using rule 18 (expr -> expr MUL expr .)
    RETURN          reduce using rule 18 (expr -> expr MUL expr .)
    BREAK           reduce using rule 18 (expr -> expr MUL expr .)
    CONTINUE        reduce using rule 18 (expr -> expr MUL expr .)
    {               reduce using rule 18 (expr -> expr MUL expr .)
    PRINT           reduce using rule 18 (expr -> expr MUL expr .)
    IF              reduce using rule 18 (expr -> expr MUL expr .)
    WHILE           reduce using rule 18 (expr -> expr MUL expr .)
    FOR             reduce using rule 18 (expr -> expr MUL expr .)
    INTNUM          reduce using rule 18 (expr -> expr MUL expr .)
    FLOATNUM        reduce using rule 18 (expr -> expr MUL expr .)
    STR             reduce using rule 18 (expr -> expr MUL expr .)
    EYE             reduce using rule 18 (expr -> expr MUL expr .)
    ONES            reduce using rule 18 (expr -> expr MUL expr .)
    ZEROS           reduce using rule 18 (expr -> expr MUL expr .)
    (               reduce using rule 18 (expr -> expr MUL expr .)
    ID              reduce using rule 18 (expr -> expr MUL expr .)
    '               shift and go to state 40

  ! '               [ reduce using rule 18 (expr -> expr MUL expr .) ]
  ! ADD             [ shift and go to state 26 ]
  ! SUB             [ shift and go to state 27 ]
  ! MUL             [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 29 ]
  ! DOT_ADD         [ shift and go to state 30 ]
  ! DOT_SUB         [ shift and go to state 31 ]
  ! DOT_MUL         [ shift and go to state 32 ]
  ! DOT_DIV         [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 68

    (19) expr -> expr DIV expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 19 (expr -> expr DIV expr .)
    ADD             reduce using rule 19 (expr -> expr DIV expr .)
    SUB             reduce using rule 19 (expr -> expr DIV expr .)
    MUL             reduce using rule 19 (expr -> expr DIV expr .)
    DIV             reduce using rule 19 (expr -> expr DIV expr .)
    DOT_ADD         reduce using rule 19 (expr -> expr DIV expr .)
    DOT_SUB         reduce using rule 19 (expr -> expr DIV expr .)
    DOT_MUL         reduce using rule 19 (expr -> expr DIV expr .)
    DOT_DIV         reduce using rule 19 (expr -> expr DIV expr .)
    GT              reduce using rule 19 (expr -> expr DIV expr .)
    LT              reduce using rule 19 (expr -> expr DIV expr .)
    GTE             reduce using rule 19 (expr -> expr DIV expr .)
    LTE             reduce using rule 19 (expr -> expr DIV expr .)
    EQ              reduce using rule 19 (expr -> expr DIV expr .)
    NEQ             reduce using rule 19 (expr -> expr DIV expr .)
    [               reduce using rule 19 (expr -> expr DIV expr .)
    ,               reduce using rule 19 (expr -> expr DIV expr .)
    )               reduce using rule 19 (expr -> expr DIV expr .)
    ]               reduce using rule 19 (expr -> expr DIV expr .)
    :               reduce using rule 19 (expr -> expr DIV expr .)
    RETURN          reduce using rule 19 (expr -> expr DIV expr .)
    BREAK           reduce using rule 19 (expr -> expr DIV expr .)
    CONTINUE        reduce using rule 19 (expr -> expr DIV expr .)
    {               reduce using rule 19 (expr -> expr DIV expr .)
    PRINT           reduce using rule 19 (expr -> expr DIV expr .)
    IF              reduce using rule 19 (expr -> expr DIV expr .)
    WHILE           reduce using rule 19 (expr -> expr DIV expr .)
    FOR             reduce using rule 19 (expr -> expr DIV expr .)
    INTNUM          reduce using rule 19 (expr -> expr DIV expr .)
    FLOATNUM        reduce using rule 19 (expr -> expr DIV expr .)
    STR             reduce using rule 19 (expr -> expr DIV expr .)
    EYE             reduce using rule 19 (expr -> expr DIV expr .)
    ONES            reduce using rule 19 (expr -> expr DIV expr .)
    ZEROS           reduce using rule 19 (expr -> expr DIV expr .)
    (               reduce using rule 19 (expr -> expr DIV expr .)
    ID              reduce using rule 19 (expr -> expr DIV expr .)
    '               shift and go to state 40

  ! '               [ reduce using rule 19 (expr -> expr DIV expr .) ]
  ! ADD             [ shift and go to state 26 ]
  ! SUB             [ shift and go to state 27 ]
  ! MUL             [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 29 ]
  ! DOT_ADD         [ shift and go to state 30 ]
  ! DOT_SUB         [ shift and go to state 31 ]
  ! DOT_MUL         [ shift and go to state 32 ]
  ! DOT_DIV         [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 69

    (20) expr -> expr DOT_ADD expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 20 (expr -> expr DOT_ADD expr .)
    ADD             reduce using rule 20 (expr -> expr DOT_ADD expr .)
    SUB             reduce using rule 20 (expr -> expr DOT_ADD expr .)
    DOT_ADD         reduce using rule 20 (expr -> expr DOT_ADD expr .)
    DOT_SUB         reduce using rule 20 (expr -> expr DOT_ADD expr .)
    GT              reduce using rule 20 (expr -> expr DOT_ADD expr .)
    LT              reduce using rule 20 (expr -> expr DOT_ADD expr .)
    GTE             reduce using rule 20 (expr -> expr DOT_ADD expr .)
    LTE             reduce using rule 20 (expr -> expr DOT_ADD expr .)
    EQ              reduce using rule 20 (expr -> expr DOT_ADD expr .)
    NEQ             reduce using rule 20 (expr -> expr DOT_ADD expr .)
    [               reduce using rule 20 (expr -> expr DOT_ADD expr .)
    ,               reduce using rule 20 (expr -> expr DOT_ADD expr .)
    )               reduce using rule 20 (expr -> expr DOT_ADD expr .)
    ]               reduce using rule 20 (expr -> expr DOT_ADD expr .)
    :               reduce using rule 20 (expr -> expr DOT_ADD expr .)
    RETURN          reduce using rule 20 (expr -> expr DOT_ADD expr .)
    BREAK           reduce using rule 20 (expr -> expr DOT_ADD expr .)
    CONTINUE        reduce using rule 20 (expr -> expr DOT_ADD expr .)
    {               reduce using rule 20 (expr -> expr DOT_ADD expr .)
    PRINT           reduce using rule 20 (expr -> expr DOT_ADD expr .)
    IF              reduce using rule 20 (expr -> expr DOT_ADD expr .)
    WHILE           reduce using rule 20 (expr -> expr DOT_ADD expr .)
    FOR             reduce using rule 20 (expr -> expr DOT_ADD expr .)
    INTNUM          reduce using rule 20 (expr -> expr DOT_ADD expr .)
    FLOATNUM        reduce using rule 20 (expr -> expr DOT_ADD expr .)
    STR             reduce using rule 20 (expr -> expr DOT_ADD expr .)
    EYE             reduce using rule 20 (expr -> expr DOT_ADD expr .)
    ONES            reduce using rule 20 (expr -> expr DOT_ADD expr .)
    ZEROS           reduce using rule 20 (expr -> expr DOT_ADD expr .)
    (               reduce using rule 20 (expr -> expr DOT_ADD expr .)
    ID              reduce using rule 20 (expr -> expr DOT_ADD expr .)
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    '               shift and go to state 40

  ! MUL             [ reduce using rule 20 (expr -> expr DOT_ADD expr .) ]
  ! DIV             [ reduce using rule 20 (expr -> expr DOT_ADD expr .) ]
  ! DOT_MUL         [ reduce using rule 20 (expr -> expr DOT_ADD expr .) ]
  ! DOT_DIV         [ reduce using rule 20 (expr -> expr DOT_ADD expr .) ]
  ! '               [ reduce using rule 20 (expr -> expr DOT_ADD expr .) ]
  ! ADD             [ shift and go to state 26 ]
  ! SUB             [ shift and go to state 27 ]
  ! DOT_ADD         [ shift and go to state 30 ]
  ! DOT_SUB         [ shift and go to state 31 ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 70

    (21) expr -> expr DOT_SUB expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 21 (expr -> expr DOT_SUB expr .)
    ADD             reduce using rule 21 (expr -> expr DOT_SUB expr .)
    SUB             reduce using rule 21 (expr -> expr DOT_SUB expr .)
    DOT_ADD         reduce using rule 21 (expr -> expr DOT_SUB expr .)
    DOT_SUB         reduce using rule 21 (expr -> expr DOT_SUB expr .)
    GT              reduce using rule 21 (expr -> expr DOT_SUB expr .)
    LT              reduce using rule 21 (expr -> expr DOT_SUB expr .)
    GTE             reduce using rule 21 (expr -> expr DOT_SUB expr .)
    LTE             reduce using rule 21 (expr -> expr DOT_SUB expr .)
    EQ              reduce using rule 21 (expr -> expr DOT_SUB expr .)
    NEQ             reduce using rule 21 (expr -> expr DOT_SUB expr .)
    [               reduce using rule 21 (expr -> expr DOT_SUB expr .)
    ,               reduce using rule 21 (expr -> expr DOT_SUB expr .)
    )               reduce using rule 21 (expr -> expr DOT_SUB expr .)
    ]               reduce using rule 21 (expr -> expr DOT_SUB expr .)
    :               reduce using rule 21 (expr -> expr DOT_SUB expr .)
    RETURN          reduce using rule 21 (expr -> expr DOT_SUB expr .)
    BREAK           reduce using rule 21 (expr -> expr DOT_SUB expr .)
    CONTINUE        reduce using rule 21 (expr -> expr DOT_SUB expr .)
    {               reduce using rule 21 (expr -> expr DOT_SUB expr .)
    PRINT           reduce using rule 21 (expr -> expr DOT_SUB expr .)
    IF              reduce using rule 21 (expr -> expr DOT_SUB expr .)
    WHILE           reduce using rule 21 (expr -> expr DOT_SUB expr .)
    FOR             reduce using rule 21 (expr -> expr DOT_SUB expr .)
    INTNUM          reduce using rule 21 (expr -> expr DOT_SUB expr .)
    FLOATNUM        reduce using rule 21 (expr -> expr DOT_SUB expr .)
    STR             reduce using rule 21 (expr -> expr DOT_SUB expr .)
    EYE             reduce using rule 21 (expr -> expr DOT_SUB expr .)
    ONES            reduce using rule 21 (expr -> expr DOT_SUB expr .)
    ZEROS           reduce using rule 21 (expr -> expr DOT_SUB expr .)
    (               reduce using rule 21 (expr -> expr DOT_SUB expr .)
    ID              reduce using rule 21 (expr -> expr DOT_SUB expr .)
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    '               shift and go to state 40

  ! MUL             [ reduce using rule 21 (expr -> expr DOT_SUB expr .) ]
  ! DIV             [ reduce using rule 21 (expr -> expr DOT_SUB expr .) ]
  ! DOT_MUL         [ reduce using rule 21 (expr -> expr DOT_SUB expr .) ]
  ! DOT_DIV         [ reduce using rule 21 (expr -> expr DOT_SUB expr .) ]
  ! '               [ reduce using rule 21 (expr -> expr DOT_SUB expr .) ]
  ! ADD             [ shift and go to state 26 ]
  ! SUB             [ shift and go to state 27 ]
  ! DOT_ADD         [ shift and go to state 30 ]
  ! DOT_SUB         [ shift and go to state 31 ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 71

    (22) expr -> expr DOT_MUL expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 22 (expr -> expr DOT_MUL expr .)
    ADD             reduce using rule 22 (expr -> expr DOT_MUL expr .)
    SUB             reduce using rule 22 (expr -> expr DOT_MUL expr .)
    MUL             reduce using rule 22 (expr -> expr DOT_MUL expr .)
    DIV             reduce using rule 22 (expr -> expr DOT_MUL expr .)
    DOT_ADD         reduce using rule 22 (expr -> expr DOT_MUL expr .)
    DOT_SUB         reduce using rule 22 (expr -> expr DOT_MUL expr .)
    DOT_MUL         reduce using rule 22 (expr -> expr DOT_MUL expr .)
    DOT_DIV         reduce using rule 22 (expr -> expr DOT_MUL expr .)
    GT              reduce using rule 22 (expr -> expr DOT_MUL expr .)
    LT              reduce using rule 22 (expr -> expr DOT_MUL expr .)
    GTE             reduce using rule 22 (expr -> expr DOT_MUL expr .)
    LTE             reduce using rule 22 (expr -> expr DOT_MUL expr .)
    EQ              reduce using rule 22 (expr -> expr DOT_MUL expr .)
    NEQ             reduce using rule 22 (expr -> expr DOT_MUL expr .)
    [               reduce using rule 22 (expr -> expr DOT_MUL expr .)
    ,               reduce using rule 22 (expr -> expr DOT_MUL expr .)
    )               reduce using rule 22 (expr -> expr DOT_MUL expr .)
    ]               reduce using rule 22 (expr -> expr DOT_MUL expr .)
    :               reduce using rule 22 (expr -> expr DOT_MUL expr .)
    RETURN          reduce using rule 22 (expr -> expr DOT_MUL expr .)
    BREAK           reduce using rule 22 (expr -> expr DOT_MUL expr .)
    CONTINUE        reduce using rule 22 (expr -> expr DOT_MUL expr .)
    {               reduce using rule 22 (expr -> expr DOT_MUL expr .)
    PRINT           reduce using rule 22 (expr -> expr DOT_MUL expr .)
    IF              reduce using rule 22 (expr -> expr DOT_MUL expr .)
    WHILE           reduce using rule 22 (expr -> expr DOT_MUL expr .)
    FOR             reduce using rule 22 (expr -> expr DOT_MUL expr .)
    INTNUM          reduce using rule 22 (expr -> expr DOT_MUL expr .)
    FLOATNUM        reduce using rule 22 (expr -> expr DOT_MUL expr .)
    STR             reduce using rule 22 (expr -> expr DOT_MUL expr .)
    EYE             reduce using rule 22 (expr -> expr DOT_MUL expr .)
    ONES            reduce using rule 22 (expr -> expr DOT_MUL expr .)
    ZEROS           reduce using rule 22 (expr -> expr DOT_MUL expr .)
    (               reduce using rule 22 (expr -> expr DOT_MUL expr .)
    ID              reduce using rule 22 (expr -> expr DOT_MUL expr .)
    '               shift and go to state 40

  ! '               [ reduce using rule 22 (expr -> expr DOT_MUL expr .) ]
  ! ADD             [ shift and go to state 26 ]
  ! SUB             [ shift and go to state 27 ]
  ! MUL             [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 29 ]
  ! DOT_ADD         [ shift and go to state 30 ]
  ! DOT_SUB         [ shift and go to state 31 ]
  ! DOT_MUL         [ shift and go to state 32 ]
  ! DOT_DIV         [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 72

    (23) expr -> expr DOT_DIV expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 23 (expr -> expr DOT_DIV expr .)
    ADD             reduce using rule 23 (expr -> expr DOT_DIV expr .)
    SUB             reduce using rule 23 (expr -> expr DOT_DIV expr .)
    MUL             reduce using rule 23 (expr -> expr DOT_DIV expr .)
    DIV             reduce using rule 23 (expr -> expr DOT_DIV expr .)
    DOT_ADD         reduce using rule 23 (expr -> expr DOT_DIV expr .)
    DOT_SUB         reduce using rule 23 (expr -> expr DOT_DIV expr .)
    DOT_MUL         reduce using rule 23 (expr -> expr DOT_DIV expr .)
    DOT_DIV         reduce using rule 23 (expr -> expr DOT_DIV expr .)
    GT              reduce using rule 23 (expr -> expr DOT_DIV expr .)
    LT              reduce using rule 23 (expr -> expr DOT_DIV expr .)
    GTE             reduce using rule 23 (expr -> expr DOT_DIV expr .)
    LTE             reduce using rule 23 (expr -> expr DOT_DIV expr .)
    EQ              reduce using rule 23 (expr -> expr DOT_DIV expr .)
    NEQ             reduce using rule 23 (expr -> expr DOT_DIV expr .)
    [               reduce using rule 23 (expr -> expr DOT_DIV expr .)
    ,               reduce using rule 23 (expr -> expr DOT_DIV expr .)
    )               reduce using rule 23 (expr -> expr DOT_DIV expr .)
    ]               reduce using rule 23 (expr -> expr DOT_DIV expr .)
    :               reduce using rule 23 (expr -> expr DOT_DIV expr .)
    RETURN          reduce using rule 23 (expr -> expr DOT_DIV expr .)
    BREAK           reduce using rule 23 (expr -> expr DOT_DIV expr .)
    CONTINUE        reduce using rule 23 (expr -> expr DOT_DIV expr .)
    {               reduce using rule 23 (expr -> expr DOT_DIV expr .)
    PRINT           reduce using rule 23 (expr -> expr DOT_DIV expr .)
    IF              reduce using rule 23 (expr -> expr DOT_DIV expr .)
    WHILE           reduce using rule 23 (expr -> expr DOT_DIV expr .)
    FOR             reduce using rule 23 (expr -> expr DOT_DIV expr .)
    INTNUM          reduce using rule 23 (expr -> expr DOT_DIV expr .)
    FLOATNUM        reduce using rule 23 (expr -> expr DOT_DIV expr .)
    STR             reduce using rule 23 (expr -> expr DOT_DIV expr .)
    EYE             reduce using rule 23 (expr -> expr DOT_DIV expr .)
    ONES            reduce using rule 23 (expr -> expr DOT_DIV expr .)
    ZEROS           reduce using rule 23 (expr -> expr DOT_DIV expr .)
    (               reduce using rule 23 (expr -> expr DOT_DIV expr .)
    ID              reduce using rule 23 (expr -> expr DOT_DIV expr .)
    '               shift and go to state 40

  ! '               [ reduce using rule 23 (expr -> expr DOT_DIV expr .) ]
  ! ADD             [ shift and go to state 26 ]
  ! SUB             [ shift and go to state 27 ]
  ! MUL             [ shift and go to state 28 ]
  ! DIV             [ shift and go to state 29 ]
  ! DOT_ADD         [ shift and go to state 30 ]
  ! DOT_SUB         [ shift and go to state 31 ]
  ! DOT_MUL         [ shift and go to state 32 ]
  ! DOT_DIV         [ shift and go to state 33 ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 73

    (24) expr -> expr GT expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 24 (expr -> expr GT expr .)
    GT              reduce using rule 24 (expr -> expr GT expr .)
    LT              reduce using rule 24 (expr -> expr GT expr .)
    GTE             reduce using rule 24 (expr -> expr GT expr .)
    LTE             reduce using rule 24 (expr -> expr GT expr .)
    EQ              reduce using rule 24 (expr -> expr GT expr .)
    NEQ             reduce using rule 24 (expr -> expr GT expr .)
    [               reduce using rule 24 (expr -> expr GT expr .)
    ,               reduce using rule 24 (expr -> expr GT expr .)
    )               reduce using rule 24 (expr -> expr GT expr .)
    ]               reduce using rule 24 (expr -> expr GT expr .)
    :               reduce using rule 24 (expr -> expr GT expr .)
    RETURN          reduce using rule 24 (expr -> expr GT expr .)
    BREAK           reduce using rule 24 (expr -> expr GT expr .)
    CONTINUE        reduce using rule 24 (expr -> expr GT expr .)
    {               reduce using rule 24 (expr -> expr GT expr .)
    PRINT           reduce using rule 24 (expr -> expr GT expr .)
    IF              reduce using rule 24 (expr -> expr GT expr .)
    WHILE           reduce using rule 24 (expr -> expr GT expr .)
    FOR             reduce using rule 24 (expr -> expr GT expr .)
    INTNUM          reduce using rule 24 (expr -> expr GT expr .)
    FLOATNUM        reduce using rule 24 (expr -> expr GT expr .)
    STR             reduce using rule 24 (expr -> expr GT expr .)
    EYE             reduce using rule 24 (expr -> expr GT expr .)
    ONES            reduce using rule 24 (expr -> expr GT expr .)
    ZEROS           reduce using rule 24 (expr -> expr GT expr .)
    (               reduce using rule 24 (expr -> expr GT expr .)
    ID              reduce using rule 24 (expr -> expr GT expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    '               shift and go to state 40

  ! ADD             [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! SUB             [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! MUL             [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! DOT_ADD         [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! DOT_SUB         [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! DOT_MUL         [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! DOT_DIV         [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! '               [ reduce using rule 24 (expr -> expr GT expr .) ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 74

    (25) expr -> expr LT expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 25 (expr -> expr LT expr .)
    GT              reduce using rule 25 (expr -> expr LT expr .)
    LT              reduce using rule 25 (expr -> expr LT expr .)
    GTE             reduce using rule 25 (expr -> expr LT expr .)
    LTE             reduce using rule 25 (expr -> expr LT expr .)
    EQ              reduce using rule 25 (expr -> expr LT expr .)
    NEQ             reduce using rule 25 (expr -> expr LT expr .)
    [               reduce using rule 25 (expr -> expr LT expr .)
    ,               reduce using rule 25 (expr -> expr LT expr .)
    )               reduce using rule 25 (expr -> expr LT expr .)
    ]               reduce using rule 25 (expr -> expr LT expr .)
    :               reduce using rule 25 (expr -> expr LT expr .)
    RETURN          reduce using rule 25 (expr -> expr LT expr .)
    BREAK           reduce using rule 25 (expr -> expr LT expr .)
    CONTINUE        reduce using rule 25 (expr -> expr LT expr .)
    {               reduce using rule 25 (expr -> expr LT expr .)
    PRINT           reduce using rule 25 (expr -> expr LT expr .)
    IF              reduce using rule 25 (expr -> expr LT expr .)
    WHILE           reduce using rule 25 (expr -> expr LT expr .)
    FOR             reduce using rule 25 (expr -> expr LT expr .)
    INTNUM          reduce using rule 25 (expr -> expr LT expr .)
    FLOATNUM        reduce using rule 25 (expr -> expr LT expr .)
    STR             reduce using rule 25 (expr -> expr LT expr .)
    EYE             reduce using rule 25 (expr -> expr LT expr .)
    ONES            reduce using rule 25 (expr -> expr LT expr .)
    ZEROS           reduce using rule 25 (expr -> expr LT expr .)
    (               reduce using rule 25 (expr -> expr LT expr .)
    ID              reduce using rule 25 (expr -> expr LT expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    '               shift and go to state 40

  ! ADD             [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! SUB             [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! MUL             [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! DOT_ADD         [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! DOT_SUB         [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! DOT_MUL         [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! DOT_DIV         [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! '               [ reduce using rule 25 (expr -> expr LT expr .) ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 75

    (26) expr -> expr GTE expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 26 (expr -> expr GTE expr .)
    GT              reduce using rule 26 (expr -> expr GTE expr .)
    LT              reduce using rule 26 (expr -> expr GTE expr .)
    GTE             reduce using rule 26 (expr -> expr GTE expr .)
    LTE             reduce using rule 26 (expr -> expr GTE expr .)
    EQ              reduce using rule 26 (expr -> expr GTE expr .)
    NEQ             reduce using rule 26 (expr -> expr GTE expr .)
    [               reduce using rule 26 (expr -> expr GTE expr .)
    ,               reduce using rule 26 (expr -> expr GTE expr .)
    )               reduce using rule 26 (expr -> expr GTE expr .)
    ]               reduce using rule 26 (expr -> expr GTE expr .)
    :               reduce using rule 26 (expr -> expr GTE expr .)
    RETURN          reduce using rule 26 (expr -> expr GTE expr .)
    BREAK           reduce using rule 26 (expr -> expr GTE expr .)
    CONTINUE        reduce using rule 26 (expr -> expr GTE expr .)
    {               reduce using rule 26 (expr -> expr GTE expr .)
    PRINT           reduce using rule 26 (expr -> expr GTE expr .)
    IF              reduce using rule 26 (expr -> expr GTE expr .)
    WHILE           reduce using rule 26 (expr -> expr GTE expr .)
    FOR             reduce using rule 26 (expr -> expr GTE expr .)
    INTNUM          reduce using rule 26 (expr -> expr GTE expr .)
    FLOATNUM        reduce using rule 26 (expr -> expr GTE expr .)
    STR             reduce using rule 26 (expr -> expr GTE expr .)
    EYE             reduce using rule 26 (expr -> expr GTE expr .)
    ONES            reduce using rule 26 (expr -> expr GTE expr .)
    ZEROS           reduce using rule 26 (expr -> expr GTE expr .)
    (               reduce using rule 26 (expr -> expr GTE expr .)
    ID              reduce using rule 26 (expr -> expr GTE expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    '               shift and go to state 40

  ! ADD             [ reduce using rule 26 (expr -> expr GTE expr .) ]
  ! SUB             [ reduce using rule 26 (expr -> expr GTE expr .) ]
  ! MUL             [ reduce using rule 26 (expr -> expr GTE expr .) ]
  ! DIV             [ reduce using rule 26 (expr -> expr GTE expr .) ]
  ! DOT_ADD         [ reduce using rule 26 (expr -> expr GTE expr .) ]
  ! DOT_SUB         [ reduce using rule 26 (expr -> expr GTE expr .) ]
  ! DOT_MUL         [ reduce using rule 26 (expr -> expr GTE expr .) ]
  ! DOT_DIV         [ reduce using rule 26 (expr -> expr GTE expr .) ]
  ! '               [ reduce using rule 26 (expr -> expr GTE expr .) ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 76

    (27) expr -> expr LTE expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 27 (expr -> expr LTE expr .)
    GT              reduce using rule 27 (expr -> expr LTE expr .)
    LT              reduce using rule 27 (expr -> expr LTE expr .)
    GTE             reduce using rule 27 (expr -> expr LTE expr .)
    LTE             reduce using rule 27 (expr -> expr LTE expr .)
    EQ              reduce using rule 27 (expr -> expr LTE expr .)
    NEQ             reduce using rule 27 (expr -> expr LTE expr .)
    [               reduce using rule 27 (expr -> expr LTE expr .)
    ,               reduce using rule 27 (expr -> expr LTE expr .)
    )               reduce using rule 27 (expr -> expr LTE expr .)
    ]               reduce using rule 27 (expr -> expr LTE expr .)
    :               reduce using rule 27 (expr -> expr LTE expr .)
    RETURN          reduce using rule 27 (expr -> expr LTE expr .)
    BREAK           reduce using rule 27 (expr -> expr LTE expr .)
    CONTINUE        reduce using rule 27 (expr -> expr LTE expr .)
    {               reduce using rule 27 (expr -> expr LTE expr .)
    PRINT           reduce using rule 27 (expr -> expr LTE expr .)
    IF              reduce using rule 27 (expr -> expr LTE expr .)
    WHILE           reduce using rule 27 (expr -> expr LTE expr .)
    FOR             reduce using rule 27 (expr -> expr LTE expr .)
    INTNUM          reduce using rule 27 (expr -> expr LTE expr .)
    FLOATNUM        reduce using rule 27 (expr -> expr LTE expr .)
    STR             reduce using rule 27 (expr -> expr LTE expr .)
    EYE             reduce using rule 27 (expr -> expr LTE expr .)
    ONES            reduce using rule 27 (expr -> expr LTE expr .)
    ZEROS           reduce using rule 27 (expr -> expr LTE expr .)
    (               reduce using rule 27 (expr -> expr LTE expr .)
    ID              reduce using rule 27 (expr -> expr LTE expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    '               shift and go to state 40

  ! ADD             [ reduce using rule 27 (expr -> expr LTE expr .) ]
  ! SUB             [ reduce using rule 27 (expr -> expr LTE expr .) ]
  ! MUL             [ reduce using rule 27 (expr -> expr LTE expr .) ]
  ! DIV             [ reduce using rule 27 (expr -> expr LTE expr .) ]
  ! DOT_ADD         [ reduce using rule 27 (expr -> expr LTE expr .) ]
  ! DOT_SUB         [ reduce using rule 27 (expr -> expr LTE expr .) ]
  ! DOT_MUL         [ reduce using rule 27 (expr -> expr LTE expr .) ]
  ! DOT_DIV         [ reduce using rule 27 (expr -> expr LTE expr .) ]
  ! '               [ reduce using rule 27 (expr -> expr LTE expr .) ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 77

    (28) expr -> expr EQ expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 28 (expr -> expr EQ expr .)
    GT              reduce using rule 28 (expr -> expr EQ expr .)
    LT              reduce using rule 28 (expr -> expr EQ expr .)
    GTE             reduce using rule 28 (expr -> expr EQ expr .)
    LTE             reduce using rule 28 (expr -> expr EQ expr .)
    EQ              reduce using rule 28 (expr -> expr EQ expr .)
    NEQ             reduce using rule 28 (expr -> expr EQ expr .)
    [               reduce using rule 28 (expr -> expr EQ expr .)
    ,               reduce using rule 28 (expr -> expr EQ expr .)
    )               reduce using rule 28 (expr -> expr EQ expr .)
    ]               reduce using rule 28 (expr -> expr EQ expr .)
    :               reduce using rule 28 (expr -> expr EQ expr .)
    RETURN          reduce using rule 28 (expr -> expr EQ expr .)
    BREAK           reduce using rule 28 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 28 (expr -> expr EQ expr .)
    {               reduce using rule 28 (expr -> expr EQ expr .)
    PRINT           reduce using rule 28 (expr -> expr EQ expr .)
    IF              reduce using rule 28 (expr -> expr EQ expr .)
    WHILE           reduce using rule 28 (expr -> expr EQ expr .)
    FOR             reduce using rule 28 (expr -> expr EQ expr .)
    INTNUM          reduce using rule 28 (expr -> expr EQ expr .)
    FLOATNUM        reduce using rule 28 (expr -> expr EQ expr .)
    STR             reduce using rule 28 (expr -> expr EQ expr .)
    EYE             reduce using rule 28 (expr -> expr EQ expr .)
    ONES            reduce using rule 28 (expr -> expr EQ expr .)
    ZEROS           reduce using rule 28 (expr -> expr EQ expr .)
    (               reduce using rule 28 (expr -> expr EQ expr .)
    ID              reduce using rule 28 (expr -> expr EQ expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    '               shift and go to state 40

  ! ADD             [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! SUB             [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! DOT_ADD         [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! DOT_SUB         [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! DOT_MUL         [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! DOT_DIV         [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! '               [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 78

    (29) expr -> expr NEQ expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 29 (expr -> expr NEQ expr .)
    GT              reduce using rule 29 (expr -> expr NEQ expr .)
    LT              reduce using rule 29 (expr -> expr NEQ expr .)
    GTE             reduce using rule 29 (expr -> expr NEQ expr .)
    LTE             reduce using rule 29 (expr -> expr NEQ expr .)
    EQ              reduce using rule 29 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 29 (expr -> expr NEQ expr .)
    [               reduce using rule 29 (expr -> expr NEQ expr .)
    ,               reduce using rule 29 (expr -> expr NEQ expr .)
    )               reduce using rule 29 (expr -> expr NEQ expr .)
    ]               reduce using rule 29 (expr -> expr NEQ expr .)
    :               reduce using rule 29 (expr -> expr NEQ expr .)
    RETURN          reduce using rule 29 (expr -> expr NEQ expr .)
    BREAK           reduce using rule 29 (expr -> expr NEQ expr .)
    CONTINUE        reduce using rule 29 (expr -> expr NEQ expr .)
    {               reduce using rule 29 (expr -> expr NEQ expr .)
    PRINT           reduce using rule 29 (expr -> expr NEQ expr .)
    IF              reduce using rule 29 (expr -> expr NEQ expr .)
    WHILE           reduce using rule 29 (expr -> expr NEQ expr .)
    FOR             reduce using rule 29 (expr -> expr NEQ expr .)
    INTNUM          reduce using rule 29 (expr -> expr NEQ expr .)
    FLOATNUM        reduce using rule 29 (expr -> expr NEQ expr .)
    STR             reduce using rule 29 (expr -> expr NEQ expr .)
    EYE             reduce using rule 29 (expr -> expr NEQ expr .)
    ONES            reduce using rule 29 (expr -> expr NEQ expr .)
    ZEROS           reduce using rule 29 (expr -> expr NEQ expr .)
    (               reduce using rule 29 (expr -> expr NEQ expr .)
    ID              reduce using rule 29 (expr -> expr NEQ expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    '               shift and go to state 40

  ! ADD             [ reduce using rule 29 (expr -> expr NEQ expr .) ]
  ! SUB             [ reduce using rule 29 (expr -> expr NEQ expr .) ]
  ! MUL             [ reduce using rule 29 (expr -> expr NEQ expr .) ]
  ! DIV             [ reduce using rule 29 (expr -> expr NEQ expr .) ]
  ! DOT_ADD         [ reduce using rule 29 (expr -> expr NEQ expr .) ]
  ! DOT_SUB         [ reduce using rule 29 (expr -> expr NEQ expr .) ]
  ! DOT_MUL         [ reduce using rule 29 (expr -> expr NEQ expr .) ]
  ! DOT_DIV         [ reduce using rule 29 (expr -> expr NEQ expr .) ]
  ! '               [ reduce using rule 29 (expr -> expr NEQ expr .) ]
  ! GT              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 35 ]
  ! GTE             [ shift and go to state 36 ]
  ! LTE             [ shift and go to state 37 ]
  ! EQ              [ shift and go to state 38 ]
  ! NEQ             [ shift and go to state 39 ]
  ! [               [ shift and go to state 41 ]


state 79

    (43) lvalue -> expr [ list . ]
    (47) list -> list . , expr

    ]               shift and go to state 98
    ,               shift and go to state 84


state 80

    (4) stmt -> RETURN expr ; .

    RETURN          reduce using rule 4 (stmt -> RETURN expr ; .)
    BREAK           reduce using rule 4 (stmt -> RETURN expr ; .)
    CONTINUE        reduce using rule 4 (stmt -> RETURN expr ; .)
    ;               reduce using rule 4 (stmt -> RETURN expr ; .)
    {               reduce using rule 4 (stmt -> RETURN expr ; .)
    PRINT           reduce using rule 4 (stmt -> RETURN expr ; .)
    IF              reduce using rule 4 (stmt -> RETURN expr ; .)
    WHILE           reduce using rule 4 (stmt -> RETURN expr ; .)
    FOR             reduce using rule 4 (stmt -> RETURN expr ; .)
    INTNUM          reduce using rule 4 (stmt -> RETURN expr ; .)
    FLOATNUM        reduce using rule 4 (stmt -> RETURN expr ; .)
    STR             reduce using rule 4 (stmt -> RETURN expr ; .)
    EYE             reduce using rule 4 (stmt -> RETURN expr ; .)
    ONES            reduce using rule 4 (stmt -> RETURN expr ; .)
    ZEROS           reduce using rule 4 (stmt -> RETURN expr ; .)
    SUB             reduce using rule 4 (stmt -> RETURN expr ; .)
    (               reduce using rule 4 (stmt -> RETURN expr ; .)
    [               reduce using rule 4 (stmt -> RETURN expr ; .)
    ID              reduce using rule 4 (stmt -> RETURN expr ; .)
    $end            reduce using rule 4 (stmt -> RETURN expr ; .)
    }               reduce using rule 4 (stmt -> RETURN expr ; .)
    ELSE            reduce using rule 4 (stmt -> RETURN expr ; .)


state 81

    (11) stmt -> { stmt_list } .

    RETURN          reduce using rule 11 (stmt -> { stmt_list } .)
    BREAK           reduce using rule 11 (stmt -> { stmt_list } .)
    CONTINUE        reduce using rule 11 (stmt -> { stmt_list } .)
    ;               reduce using rule 11 (stmt -> { stmt_list } .)
    {               reduce using rule 11 (stmt -> { stmt_list } .)
    PRINT           reduce using rule 11 (stmt -> { stmt_list } .)
    IF              reduce using rule 11 (stmt -> { stmt_list } .)
    WHILE           reduce using rule 11 (stmt -> { stmt_list } .)
    FOR             reduce using rule 11 (stmt -> { stmt_list } .)
    INTNUM          reduce using rule 11 (stmt -> { stmt_list } .)
    FLOATNUM        reduce using rule 11 (stmt -> { stmt_list } .)
    STR             reduce using rule 11 (stmt -> { stmt_list } .)
    EYE             reduce using rule 11 (stmt -> { stmt_list } .)
    ONES            reduce using rule 11 (stmt -> { stmt_list } .)
    ZEROS           reduce using rule 11 (stmt -> { stmt_list } .)
    SUB             reduce using rule 11 (stmt -> { stmt_list } .)
    (               reduce using rule 11 (stmt -> { stmt_list } .)
    [               reduce using rule 11 (stmt -> { stmt_list } .)
    ID              reduce using rule 11 (stmt -> { stmt_list } .)
    $end            reduce using rule 11 (stmt -> { stmt_list } .)
    }               reduce using rule 11 (stmt -> { stmt_list } .)
    ELSE            reduce using rule 11 (stmt -> { stmt_list } .)


state 82

    (10) stmt_list -> stmt_list stmt .

    }               reduce using rule 10 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 10 (stmt_list -> stmt_list stmt .)
    BREAK           reduce using rule 10 (stmt_list -> stmt_list stmt .)
    CONTINUE        reduce using rule 10 (stmt_list -> stmt_list stmt .)
    ;               reduce using rule 10 (stmt_list -> stmt_list stmt .)
    {               reduce using rule 10 (stmt_list -> stmt_list stmt .)
    PRINT           reduce using rule 10 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 10 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 10 (stmt_list -> stmt_list stmt .)
    FOR             reduce using rule 10 (stmt_list -> stmt_list stmt .)
    INTNUM          reduce using rule 10 (stmt_list -> stmt_list stmt .)
    FLOATNUM        reduce using rule 10 (stmt_list -> stmt_list stmt .)
    STR             reduce using rule 10 (stmt_list -> stmt_list stmt .)
    EYE             reduce using rule 10 (stmt_list -> stmt_list stmt .)
    ONES            reduce using rule 10 (stmt_list -> stmt_list stmt .)
    ZEROS           reduce using rule 10 (stmt_list -> stmt_list stmt .)
    SUB             reduce using rule 10 (stmt_list -> stmt_list stmt .)
    (               reduce using rule 10 (stmt_list -> stmt_list stmt .)
    [               reduce using rule 10 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 10 (stmt_list -> stmt_list stmt .)


state 83

    (12) stmt -> PRINT list ; .

    RETURN          reduce using rule 12 (stmt -> PRINT list ; .)
    BREAK           reduce using rule 12 (stmt -> PRINT list ; .)
    CONTINUE        reduce using rule 12 (stmt -> PRINT list ; .)
    ;               reduce using rule 12 (stmt -> PRINT list ; .)
    {               reduce using rule 12 (stmt -> PRINT list ; .)
    PRINT           reduce using rule 12 (stmt -> PRINT list ; .)
    IF              reduce using rule 12 (stmt -> PRINT list ; .)
    WHILE           reduce using rule 12 (stmt -> PRINT list ; .)
    FOR             reduce using rule 12 (stmt -> PRINT list ; .)
    INTNUM          reduce using rule 12 (stmt -> PRINT list ; .)
    FLOATNUM        reduce using rule 12 (stmt -> PRINT list ; .)
    STR             reduce using rule 12 (stmt -> PRINT list ; .)
    EYE             reduce using rule 12 (stmt -> PRINT list ; .)
    ONES            reduce using rule 12 (stmt -> PRINT list ; .)
    ZEROS           reduce using rule 12 (stmt -> PRINT list ; .)
    SUB             reduce using rule 12 (stmt -> PRINT list ; .)
    (               reduce using rule 12 (stmt -> PRINT list ; .)
    [               reduce using rule 12 (stmt -> PRINT list ; .)
    ID              reduce using rule 12 (stmt -> PRINT list ; .)
    $end            reduce using rule 12 (stmt -> PRINT list ; .)
    }               reduce using rule 12 (stmt -> PRINT list ; .)
    ELSE            reduce using rule 12 (stmt -> PRINT list ; .)


state 84

    (47) list -> list , . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 99
    lvalue                         shift and go to state 22

state 85

    (48) stmt -> IF ( expr . ) stmt
    (49) stmt -> IF ( expr . ) stmt ELSE stmt
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    )               shift and go to state 100
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40
    [               shift and go to state 41


state 86

    (42) expr -> ( expr ) .

    ;               reduce using rule 42 (expr -> ( expr ) .)
    ADD             reduce using rule 42 (expr -> ( expr ) .)
    SUB             reduce using rule 42 (expr -> ( expr ) .)
    MUL             reduce using rule 42 (expr -> ( expr ) .)
    DIV             reduce using rule 42 (expr -> ( expr ) .)
    DOT_ADD         reduce using rule 42 (expr -> ( expr ) .)
    DOT_SUB         reduce using rule 42 (expr -> ( expr ) .)
    DOT_MUL         reduce using rule 42 (expr -> ( expr ) .)
    DOT_DIV         reduce using rule 42 (expr -> ( expr ) .)
    GT              reduce using rule 42 (expr -> ( expr ) .)
    LT              reduce using rule 42 (expr -> ( expr ) .)
    GTE             reduce using rule 42 (expr -> ( expr ) .)
    LTE             reduce using rule 42 (expr -> ( expr ) .)
    EQ              reduce using rule 42 (expr -> ( expr ) .)
    NEQ             reduce using rule 42 (expr -> ( expr ) .)
    '               reduce using rule 42 (expr -> ( expr ) .)
    [               reduce using rule 42 (expr -> ( expr ) .)
    ,               reduce using rule 42 (expr -> ( expr ) .)
    )               reduce using rule 42 (expr -> ( expr ) .)
    ]               reduce using rule 42 (expr -> ( expr ) .)
    :               reduce using rule 42 (expr -> ( expr ) .)
    RETURN          reduce using rule 42 (expr -> ( expr ) .)
    BREAK           reduce using rule 42 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 42 (expr -> ( expr ) .)
    {               reduce using rule 42 (expr -> ( expr ) .)
    PRINT           reduce using rule 42 (expr -> ( expr ) .)
    IF              reduce using rule 42 (expr -> ( expr ) .)
    WHILE           reduce using rule 42 (expr -> ( expr ) .)
    FOR             reduce using rule 42 (expr -> ( expr ) .)
    INTNUM          reduce using rule 42 (expr -> ( expr ) .)
    FLOATNUM        reduce using rule 42 (expr -> ( expr ) .)
    STR             reduce using rule 42 (expr -> ( expr ) .)
    EYE             reduce using rule 42 (expr -> ( expr ) .)
    ONES            reduce using rule 42 (expr -> ( expr ) .)
    ZEROS           reduce using rule 42 (expr -> ( expr ) .)
    (               reduce using rule 42 (expr -> ( expr ) .)
    ID              reduce using rule 42 (expr -> ( expr ) .)


state 87

    (50) stmt -> WHILE ( expr . ) stmt
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    )               shift and go to state 101
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40
    [               shift and go to state 41


state 88

    (52) stmt -> FOR ID ASSIGN . range stmt
    (51) range -> . expr : expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    range                          shift and go to state 102
    expr                           shift and go to state 103
    lvalue                         shift and go to state 22

state 89

    (30) expr -> EYE ( expr . )
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    )               shift and go to state 104
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40
    [               shift and go to state 41


state 90

    (31) expr -> ONES ( expr . )
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    )               shift and go to state 105
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40
    [               shift and go to state 41


state 91

    (32) expr -> ZEROS ( expr . )
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    )               shift and go to state 106
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40
    [               shift and go to state 41


state 92

    (33) expr -> lvalue ASSIGN expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    [               reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    ,               reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    )               reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    ]               reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    :               reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    RETURN          reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    BREAK           reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    CONTINUE        reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    {               reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    PRINT           reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    IF              reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    WHILE           reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    FOR             reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    INTNUM          reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    FLOATNUM        reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    STR             reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    EYE             reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    ONES            reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    ZEROS           reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    (               reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    ID              reduce using rule 33 (expr -> lvalue ASSIGN expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40

  ! ADD             [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! SUB             [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! MUL             [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! DIV             [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! DOT_ADD         [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! DOT_SUB         [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! DOT_MUL         [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! DOT_DIV         [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! GT              [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! LT              [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! GTE             [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! LTE             [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! EQ              [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! NEQ             [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! '               [ reduce using rule 33 (expr -> lvalue ASSIGN expr .) ]
  ! [               [ shift and go to state 41 ]


state 93

    (34) expr -> lvalue ADD_ASSIGN expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    [               reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    ,               reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    )               reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    ]               reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    :               reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    RETURN          reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    BREAK           reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    CONTINUE        reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    {               reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    PRINT           reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    IF              reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    WHILE           reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    FOR             reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    INTNUM          reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    FLOATNUM        reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    STR             reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    EYE             reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    ONES            reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    ZEROS           reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    (               reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    ID              reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40

  ! ADD             [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! SUB             [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! MUL             [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! DIV             [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! DOT_ADD         [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! DOT_SUB         [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! DOT_MUL         [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! DOT_DIV         [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! GT              [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! LT              [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! GTE             [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! LTE             [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! EQ              [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! NEQ             [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! '               [ reduce using rule 34 (expr -> lvalue ADD_ASSIGN expr .) ]
  ! [               [ shift and go to state 41 ]


state 94

    (35) expr -> lvalue SUB_ASSIGN expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    [               reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    ,               reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    )               reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    ]               reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    :               reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    RETURN          reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    BREAK           reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    CONTINUE        reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    {               reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    PRINT           reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    IF              reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    WHILE           reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    FOR             reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    INTNUM          reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    FLOATNUM        reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    STR             reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    EYE             reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    ONES            reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    ZEROS           reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    (               reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    ID              reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40

  ! ADD             [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! SUB             [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! MUL             [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! DIV             [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! DOT_ADD         [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! DOT_SUB         [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! DOT_MUL         [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! DOT_DIV         [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! GT              [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! LT              [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! GTE             [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! LTE             [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! EQ              [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! NEQ             [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! '               [ reduce using rule 35 (expr -> lvalue SUB_ASSIGN expr .) ]
  ! [               [ shift and go to state 41 ]


state 95

    (36) expr -> lvalue MUL_ASSIGN expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    [               reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    ,               reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    )               reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    ]               reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    :               reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    RETURN          reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    BREAK           reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    CONTINUE        reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    {               reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    PRINT           reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    IF              reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    WHILE           reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    FOR             reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    INTNUM          reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    FLOATNUM        reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    STR             reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    EYE             reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    ONES            reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    ZEROS           reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    (               reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    ID              reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40

  ! ADD             [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! SUB             [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! MUL             [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! DIV             [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! DOT_ADD         [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! DOT_SUB         [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! DOT_MUL         [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! DOT_DIV         [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! GT              [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! LT              [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! GTE             [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! LTE             [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! EQ              [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! NEQ             [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! '               [ reduce using rule 36 (expr -> lvalue MUL_ASSIGN expr .) ]
  ! [               [ shift and go to state 41 ]


state 96

    (37) expr -> lvalue DIV_ASSIGN expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    [               reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    ,               reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    )               reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    ]               reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    :               reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    RETURN          reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    BREAK           reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    CONTINUE        reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    {               reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    PRINT           reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    IF              reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    WHILE           reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    FOR             reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    INTNUM          reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    FLOATNUM        reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    STR             reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    EYE             reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    ONES            reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    ZEROS           reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    (               reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    ID              reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40

  ! ADD             [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! SUB             [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! MUL             [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! DIV             [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! DOT_ADD         [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! DOT_SUB         [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! DOT_MUL         [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! DOT_DIV         [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! GT              [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! LT              [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! GTE             [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! LTE             [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! EQ              [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! NEQ             [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! '               [ reduce using rule 37 (expr -> lvalue DIV_ASSIGN expr .) ]
  ! [               [ shift and go to state 41 ]


state 97

    (45) expr -> [ list ] .

    ;               reduce using rule 45 (expr -> [ list ] .)
    ADD             reduce using rule 45 (expr -> [ list ] .)
    SUB             reduce using rule 45 (expr -> [ list ] .)
    MUL             reduce using rule 45 (expr -> [ list ] .)
    DIV             reduce using rule 45 (expr -> [ list ] .)
    DOT_ADD         reduce using rule 45 (expr -> [ list ] .)
    DOT_SUB         reduce using rule 45 (expr -> [ list ] .)
    DOT_MUL         reduce using rule 45 (expr -> [ list ] .)
    DOT_DIV         reduce using rule 45 (expr -> [ list ] .)
    GT              reduce using rule 45 (expr -> [ list ] .)
    LT              reduce using rule 45 (expr -> [ list ] .)
    GTE             reduce using rule 45 (expr -> [ list ] .)
    LTE             reduce using rule 45 (expr -> [ list ] .)
    EQ              reduce using rule 45 (expr -> [ list ] .)
    NEQ             reduce using rule 45 (expr -> [ list ] .)
    '               reduce using rule 45 (expr -> [ list ] .)
    [               reduce using rule 45 (expr -> [ list ] .)
    ,               reduce using rule 45 (expr -> [ list ] .)
    )               reduce using rule 45 (expr -> [ list ] .)
    ]               reduce using rule 45 (expr -> [ list ] .)
    :               reduce using rule 45 (expr -> [ list ] .)
    RETURN          reduce using rule 45 (expr -> [ list ] .)
    BREAK           reduce using rule 45 (expr -> [ list ] .)
    CONTINUE        reduce using rule 45 (expr -> [ list ] .)
    {               reduce using rule 45 (expr -> [ list ] .)
    PRINT           reduce using rule 45 (expr -> [ list ] .)
    IF              reduce using rule 45 (expr -> [ list ] .)
    WHILE           reduce using rule 45 (expr -> [ list ] .)
    FOR             reduce using rule 45 (expr -> [ list ] .)
    INTNUM          reduce using rule 45 (expr -> [ list ] .)
    FLOATNUM        reduce using rule 45 (expr -> [ list ] .)
    STR             reduce using rule 45 (expr -> [ list ] .)
    EYE             reduce using rule 45 (expr -> [ list ] .)
    ONES            reduce using rule 45 (expr -> [ list ] .)
    ZEROS           reduce using rule 45 (expr -> [ list ] .)
    (               reduce using rule 45 (expr -> [ list ] .)
    ID              reduce using rule 45 (expr -> [ list ] .)


state 98

    (43) lvalue -> expr [ list ] .

    ASSIGN          reduce using rule 43 (lvalue -> expr [ list ] .)
    ADD_ASSIGN      reduce using rule 43 (lvalue -> expr [ list ] .)
    SUB_ASSIGN      reduce using rule 43 (lvalue -> expr [ list ] .)
    MUL_ASSIGN      reduce using rule 43 (lvalue -> expr [ list ] .)
    DIV_ASSIGN      reduce using rule 43 (lvalue -> expr [ list ] .)
    ;               reduce using rule 43 (lvalue -> expr [ list ] .)
    ADD             reduce using rule 43 (lvalue -> expr [ list ] .)
    SUB             reduce using rule 43 (lvalue -> expr [ list ] .)
    MUL             reduce using rule 43 (lvalue -> expr [ list ] .)
    DIV             reduce using rule 43 (lvalue -> expr [ list ] .)
    DOT_ADD         reduce using rule 43 (lvalue -> expr [ list ] .)
    DOT_SUB         reduce using rule 43 (lvalue -> expr [ list ] .)
    DOT_MUL         reduce using rule 43 (lvalue -> expr [ list ] .)
    DOT_DIV         reduce using rule 43 (lvalue -> expr [ list ] .)
    GT              reduce using rule 43 (lvalue -> expr [ list ] .)
    LT              reduce using rule 43 (lvalue -> expr [ list ] .)
    GTE             reduce using rule 43 (lvalue -> expr [ list ] .)
    LTE             reduce using rule 43 (lvalue -> expr [ list ] .)
    EQ              reduce using rule 43 (lvalue -> expr [ list ] .)
    NEQ             reduce using rule 43 (lvalue -> expr [ list ] .)
    '               reduce using rule 43 (lvalue -> expr [ list ] .)
    [               reduce using rule 43 (lvalue -> expr [ list ] .)
    ,               reduce using rule 43 (lvalue -> expr [ list ] .)
    )               reduce using rule 43 (lvalue -> expr [ list ] .)
    ]               reduce using rule 43 (lvalue -> expr [ list ] .)
    :               reduce using rule 43 (lvalue -> expr [ list ] .)
    RETURN          reduce using rule 43 (lvalue -> expr [ list ] .)
    BREAK           reduce using rule 43 (lvalue -> expr [ list ] .)
    CONTINUE        reduce using rule 43 (lvalue -> expr [ list ] .)
    {               reduce using rule 43 (lvalue -> expr [ list ] .)
    PRINT           reduce using rule 43 (lvalue -> expr [ list ] .)
    IF              reduce using rule 43 (lvalue -> expr [ list ] .)
    WHILE           reduce using rule 43 (lvalue -> expr [ list ] .)
    FOR             reduce using rule 43 (lvalue -> expr [ list ] .)
    INTNUM          reduce using rule 43 (lvalue -> expr [ list ] .)
    FLOATNUM        reduce using rule 43 (lvalue -> expr [ list ] .)
    STR             reduce using rule 43 (lvalue -> expr [ list ] .)
    EYE             reduce using rule 43 (lvalue -> expr [ list ] .)
    ONES            reduce using rule 43 (lvalue -> expr [ list ] .)
    ZEROS           reduce using rule 43 (lvalue -> expr [ list ] .)
    (               reduce using rule 43 (lvalue -> expr [ list ] .)
    ID              reduce using rule 43 (lvalue -> expr [ list ] .)


state 99

    (47) list -> list , expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    ;               reduce using rule 47 (list -> list , expr .)
    ,               reduce using rule 47 (list -> list , expr .)
    ]               reduce using rule 47 (list -> list , expr .)
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40
    [               shift and go to state 41


state 100

    (48) stmt -> IF ( expr ) . stmt
    (49) stmt -> IF ( expr ) . stmt ELSE stmt
    (3) stmt -> . expr ;
    (4) stmt -> . RETURN expr ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . CONTINUE ;
    (7) stmt -> . ;
    (8) stmt -> . { }
    (11) stmt -> . { stmt_list }
    (12) stmt -> . PRINT list ;
    (48) stmt -> . IF ( expr ) stmt
    (49) stmt -> . IF ( expr ) stmt ELSE stmt
    (50) stmt -> . WHILE ( expr ) stmt
    (52) stmt -> . FOR ID ASSIGN range stmt
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    RETURN          shift and go to state 5
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ;               shift and go to state 4
    {               shift and go to state 8
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 3
    stmt                           shift and go to state 107
    lvalue                         shift and go to state 22

state 101

    (50) stmt -> WHILE ( expr ) . stmt
    (3) stmt -> . expr ;
    (4) stmt -> . RETURN expr ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . CONTINUE ;
    (7) stmt -> . ;
    (8) stmt -> . { }
    (11) stmt -> . { stmt_list }
    (12) stmt -> . PRINT list ;
    (48) stmt -> . IF ( expr ) stmt
    (49) stmt -> . IF ( expr ) stmt ELSE stmt
    (50) stmt -> . WHILE ( expr ) stmt
    (52) stmt -> . FOR ID ASSIGN range stmt
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    RETURN          shift and go to state 5
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ;               shift and go to state 4
    {               shift and go to state 8
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 3
    stmt                           shift and go to state 108
    lvalue                         shift and go to state 22

state 102

    (52) stmt -> FOR ID ASSIGN range . stmt
    (3) stmt -> . expr ;
    (4) stmt -> . RETURN expr ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . CONTINUE ;
    (7) stmt -> . ;
    (8) stmt -> . { }
    (11) stmt -> . { stmt_list }
    (12) stmt -> . PRINT list ;
    (48) stmt -> . IF ( expr ) stmt
    (49) stmt -> . IF ( expr ) stmt ELSE stmt
    (50) stmt -> . WHILE ( expr ) stmt
    (52) stmt -> . FOR ID ASSIGN range stmt
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    RETURN          shift and go to state 5
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ;               shift and go to state 4
    {               shift and go to state 8
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    stmt                           shift and go to state 109
    expr                           shift and go to state 3
    lvalue                         shift and go to state 22

state 103

    (51) range -> expr . : expr
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    :               shift and go to state 110
    ADD             shift and go to state 26
    SUB             shift and go to state 27
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40
    [               shift and go to state 41


state 104

    (30) expr -> EYE ( expr ) .

    ;               reduce using rule 30 (expr -> EYE ( expr ) .)
    ADD             reduce using rule 30 (expr -> EYE ( expr ) .)
    SUB             reduce using rule 30 (expr -> EYE ( expr ) .)
    MUL             reduce using rule 30 (expr -> EYE ( expr ) .)
    DIV             reduce using rule 30 (expr -> EYE ( expr ) .)
    DOT_ADD         reduce using rule 30 (expr -> EYE ( expr ) .)
    DOT_SUB         reduce using rule 30 (expr -> EYE ( expr ) .)
    DOT_MUL         reduce using rule 30 (expr -> EYE ( expr ) .)
    DOT_DIV         reduce using rule 30 (expr -> EYE ( expr ) .)
    GT              reduce using rule 30 (expr -> EYE ( expr ) .)
    LT              reduce using rule 30 (expr -> EYE ( expr ) .)
    GTE             reduce using rule 30 (expr -> EYE ( expr ) .)
    LTE             reduce using rule 30 (expr -> EYE ( expr ) .)
    EQ              reduce using rule 30 (expr -> EYE ( expr ) .)
    NEQ             reduce using rule 30 (expr -> EYE ( expr ) .)
    '               reduce using rule 30 (expr -> EYE ( expr ) .)
    [               reduce using rule 30 (expr -> EYE ( expr ) .)
    ,               reduce using rule 30 (expr -> EYE ( expr ) .)
    )               reduce using rule 30 (expr -> EYE ( expr ) .)
    ]               reduce using rule 30 (expr -> EYE ( expr ) .)
    :               reduce using rule 30 (expr -> EYE ( expr ) .)
    RETURN          reduce using rule 30 (expr -> EYE ( expr ) .)
    BREAK           reduce using rule 30 (expr -> EYE ( expr ) .)
    CONTINUE        reduce using rule 30 (expr -> EYE ( expr ) .)
    {               reduce using rule 30 (expr -> EYE ( expr ) .)
    PRINT           reduce using rule 30 (expr -> EYE ( expr ) .)
    IF              reduce using rule 30 (expr -> EYE ( expr ) .)
    WHILE           reduce using rule 30 (expr -> EYE ( expr ) .)
    FOR             reduce using rule 30 (expr -> EYE ( expr ) .)
    INTNUM          reduce using rule 30 (expr -> EYE ( expr ) .)
    FLOATNUM        reduce using rule 30 (expr -> EYE ( expr ) .)
    STR             reduce using rule 30 (expr -> EYE ( expr ) .)
    EYE             reduce using rule 30 (expr -> EYE ( expr ) .)
    ONES            reduce using rule 30 (expr -> EYE ( expr ) .)
    ZEROS           reduce using rule 30 (expr -> EYE ( expr ) .)
    (               reduce using rule 30 (expr -> EYE ( expr ) .)
    ID              reduce using rule 30 (expr -> EYE ( expr ) .)


state 105

    (31) expr -> ONES ( expr ) .

    ;               reduce using rule 31 (expr -> ONES ( expr ) .)
    ADD             reduce using rule 31 (expr -> ONES ( expr ) .)
    SUB             reduce using rule 31 (expr -> ONES ( expr ) .)
    MUL             reduce using rule 31 (expr -> ONES ( expr ) .)
    DIV             reduce using rule 31 (expr -> ONES ( expr ) .)
    DOT_ADD         reduce using rule 31 (expr -> ONES ( expr ) .)
    DOT_SUB         reduce using rule 31 (expr -> ONES ( expr ) .)
    DOT_MUL         reduce using rule 31 (expr -> ONES ( expr ) .)
    DOT_DIV         reduce using rule 31 (expr -> ONES ( expr ) .)
    GT              reduce using rule 31 (expr -> ONES ( expr ) .)
    LT              reduce using rule 31 (expr -> ONES ( expr ) .)
    GTE             reduce using rule 31 (expr -> ONES ( expr ) .)
    LTE             reduce using rule 31 (expr -> ONES ( expr ) .)
    EQ              reduce using rule 31 (expr -> ONES ( expr ) .)
    NEQ             reduce using rule 31 (expr -> ONES ( expr ) .)
    '               reduce using rule 31 (expr -> ONES ( expr ) .)
    [               reduce using rule 31 (expr -> ONES ( expr ) .)
    ,               reduce using rule 31 (expr -> ONES ( expr ) .)
    )               reduce using rule 31 (expr -> ONES ( expr ) .)
    ]               reduce using rule 31 (expr -> ONES ( expr ) .)
    :               reduce using rule 31 (expr -> ONES ( expr ) .)
    RETURN          reduce using rule 31 (expr -> ONES ( expr ) .)
    BREAK           reduce using rule 31 (expr -> ONES ( expr ) .)
    CONTINUE        reduce using rule 31 (expr -> ONES ( expr ) .)
    {               reduce using rule 31 (expr -> ONES ( expr ) .)
    PRINT           reduce using rule 31 (expr -> ONES ( expr ) .)
    IF              reduce using rule 31 (expr -> ONES ( expr ) .)
    WHILE           reduce using rule 31 (expr -> ONES ( expr ) .)
    FOR             reduce using rule 31 (expr -> ONES ( expr ) .)
    INTNUM          reduce using rule 31 (expr -> ONES ( expr ) .)
    FLOATNUM        reduce using rule 31 (expr -> ONES ( expr ) .)
    STR             reduce using rule 31 (expr -> ONES ( expr ) .)
    EYE             reduce using rule 31 (expr -> ONES ( expr ) .)
    ONES            reduce using rule 31 (expr -> ONES ( expr ) .)
    ZEROS           reduce using rule 31 (expr -> ONES ( expr ) .)
    (               reduce using rule 31 (expr -> ONES ( expr ) .)
    ID              reduce using rule 31 (expr -> ONES ( expr ) .)


state 106

    (32) expr -> ZEROS ( expr ) .

    ;               reduce using rule 32 (expr -> ZEROS ( expr ) .)
    ADD             reduce using rule 32 (expr -> ZEROS ( expr ) .)
    SUB             reduce using rule 32 (expr -> ZEROS ( expr ) .)
    MUL             reduce using rule 32 (expr -> ZEROS ( expr ) .)
    DIV             reduce using rule 32 (expr -> ZEROS ( expr ) .)
    DOT_ADD         reduce using rule 32 (expr -> ZEROS ( expr ) .)
    DOT_SUB         reduce using rule 32 (expr -> ZEROS ( expr ) .)
    DOT_MUL         reduce using rule 32 (expr -> ZEROS ( expr ) .)
    DOT_DIV         reduce using rule 32 (expr -> ZEROS ( expr ) .)
    GT              reduce using rule 32 (expr -> ZEROS ( expr ) .)
    LT              reduce using rule 32 (expr -> ZEROS ( expr ) .)
    GTE             reduce using rule 32 (expr -> ZEROS ( expr ) .)
    LTE             reduce using rule 32 (expr -> ZEROS ( expr ) .)
    EQ              reduce using rule 32 (expr -> ZEROS ( expr ) .)
    NEQ             reduce using rule 32 (expr -> ZEROS ( expr ) .)
    '               reduce using rule 32 (expr -> ZEROS ( expr ) .)
    [               reduce using rule 32 (expr -> ZEROS ( expr ) .)
    ,               reduce using rule 32 (expr -> ZEROS ( expr ) .)
    )               reduce using rule 32 (expr -> ZEROS ( expr ) .)
    ]               reduce using rule 32 (expr -> ZEROS ( expr ) .)
    :               reduce using rule 32 (expr -> ZEROS ( expr ) .)
    RETURN          reduce using rule 32 (expr -> ZEROS ( expr ) .)
    BREAK           reduce using rule 32 (expr -> ZEROS ( expr ) .)
    CONTINUE        reduce using rule 32 (expr -> ZEROS ( expr ) .)
    {               reduce using rule 32 (expr -> ZEROS ( expr ) .)
    PRINT           reduce using rule 32 (expr -> ZEROS ( expr ) .)
    IF              reduce using rule 32 (expr -> ZEROS ( expr ) .)
    WHILE           reduce using rule 32 (expr -> ZEROS ( expr ) .)
    FOR             reduce using rule 32 (expr -> ZEROS ( expr ) .)
    INTNUM          reduce using rule 32 (expr -> ZEROS ( expr ) .)
    FLOATNUM        reduce using rule 32 (expr -> ZEROS ( expr ) .)
    STR             reduce using rule 32 (expr -> ZEROS ( expr ) .)
    EYE             reduce using rule 32 (expr -> ZEROS ( expr ) .)
    ONES            reduce using rule 32 (expr -> ZEROS ( expr ) .)
    ZEROS           reduce using rule 32 (expr -> ZEROS ( expr ) .)
    (               reduce using rule 32 (expr -> ZEROS ( expr ) .)
    ID              reduce using rule 32 (expr -> ZEROS ( expr ) .)


state 107

    (48) stmt -> IF ( expr ) stmt .
    (49) stmt -> IF ( expr ) stmt . ELSE stmt

    RETURN          reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    BREAK           reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    CONTINUE        reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    ;               reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    {               reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    PRINT           reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    IF              reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    WHILE           reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    FOR             reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    INTNUM          reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    FLOATNUM        reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    STR             reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    EYE             reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    ONES            reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    ZEROS           reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    SUB             reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    (               reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    [               reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    ID              reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    $end            reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    }               reduce using rule 48 (stmt -> IF ( expr ) stmt .)
    ELSE            shift and go to state 111

  ! ELSE            [ reduce using rule 48 (stmt -> IF ( expr ) stmt .) ]


state 108

    (50) stmt -> WHILE ( expr ) stmt .

    RETURN          reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    BREAK           reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    CONTINUE        reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    ;               reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    {               reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    PRINT           reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    IF              reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    WHILE           reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    FOR             reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    INTNUM          reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    FLOATNUM        reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    STR             reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    EYE             reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    ONES            reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    ZEROS           reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    SUB             reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    (               reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    [               reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    ID              reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    $end            reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    }               reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)
    ELSE            reduce using rule 50 (stmt -> WHILE ( expr ) stmt .)


state 109

    (52) stmt -> FOR ID ASSIGN range stmt .

    RETURN          reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    BREAK           reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    CONTINUE        reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    ;               reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    {               reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    PRINT           reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    IF              reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    WHILE           reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    FOR             reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    INTNUM          reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    FLOATNUM        reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    STR             reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    EYE             reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    ONES            reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    ZEROS           reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    SUB             reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    (               reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    [               reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    ID              reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    $end            reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    }               reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)
    ELSE            reduce using rule 52 (stmt -> FOR ID ASSIGN range stmt .)


state 110

    (51) range -> expr : . expr
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 112
    lvalue                         shift and go to state 22

state 111

    (49) stmt -> IF ( expr ) stmt ELSE . stmt
    (3) stmt -> . expr ;
    (4) stmt -> . RETURN expr ;
    (5) stmt -> . BREAK ;
    (6) stmt -> . CONTINUE ;
    (7) stmt -> . ;
    (8) stmt -> . { }
    (11) stmt -> . { stmt_list }
    (12) stmt -> . PRINT list ;
    (48) stmt -> . IF ( expr ) stmt
    (49) stmt -> . IF ( expr ) stmt ELSE stmt
    (50) stmt -> . WHILE ( expr ) stmt
    (52) stmt -> . FOR ID ASSIGN range stmt
    (13) expr -> . INTNUM
    (14) expr -> . FLOATNUM
    (15) expr -> . STR
    (16) expr -> . expr ADD expr
    (17) expr -> . expr SUB expr
    (18) expr -> . expr MUL expr
    (19) expr -> . expr DIV expr
    (20) expr -> . expr DOT_ADD expr
    (21) expr -> . expr DOT_SUB expr
    (22) expr -> . expr DOT_MUL expr
    (23) expr -> . expr DOT_DIV expr
    (24) expr -> . expr GT expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GTE expr
    (27) expr -> . expr LTE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . expr NEQ expr
    (30) expr -> . EYE ( expr )
    (31) expr -> . ONES ( expr )
    (32) expr -> . ZEROS ( expr )
    (33) expr -> . lvalue ASSIGN expr
    (34) expr -> . lvalue ADD_ASSIGN expr
    (35) expr -> . lvalue SUB_ASSIGN expr
    (36) expr -> . lvalue MUL_ASSIGN expr
    (37) expr -> . lvalue DIV_ASSIGN expr
    (38) expr -> . expr '
    (40) expr -> . SUB expr
    (41) expr -> . lvalue
    (42) expr -> . ( expr )
    (44) expr -> . [ ]
    (45) expr -> . [ list ]
    (39) lvalue -> . ID
    (43) lvalue -> . expr [ list ]

    RETURN          shift and go to state 5
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ;               shift and go to state 4
    {               shift and go to state 8
    PRINT           shift and go to state 9
    IF              shift and go to state 10
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    INTNUM          shift and go to state 15
    FLOATNUM        shift and go to state 16
    STR             shift and go to state 17
    EYE             shift and go to state 19
    ONES            shift and go to state 20
    ZEROS           shift and go to state 21
    SUB             shift and go to state 18
    (               shift and go to state 11
    [               shift and go to state 23
    ID              shift and go to state 14

    expr                           shift and go to state 3
    stmt                           shift and go to state 113
    lvalue                         shift and go to state 22

state 112

    (51) range -> expr : expr .
    (16) expr -> expr . ADD expr
    (17) expr -> expr . SUB expr
    (18) expr -> expr . MUL expr
    (19) expr -> expr . DIV expr
    (20) expr -> expr . DOT_ADD expr
    (21) expr -> expr . DOT_SUB expr
    (22) expr -> expr . DOT_MUL expr
    (23) expr -> expr . DOT_DIV expr
    (24) expr -> expr . GT expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GTE expr
    (27) expr -> expr . LTE expr
    (28) expr -> expr . EQ expr
    (29) expr -> expr . NEQ expr
    (38) expr -> expr . '
    (43) lvalue -> expr . [ list ]

    RETURN          reduce using rule 51 (range -> expr : expr .)
    BREAK           reduce using rule 51 (range -> expr : expr .)
    CONTINUE        reduce using rule 51 (range -> expr : expr .)
    ;               reduce using rule 51 (range -> expr : expr .)
    {               reduce using rule 51 (range -> expr : expr .)
    PRINT           reduce using rule 51 (range -> expr : expr .)
    IF              reduce using rule 51 (range -> expr : expr .)
    WHILE           reduce using rule 51 (range -> expr : expr .)
    FOR             reduce using rule 51 (range -> expr : expr .)
    INTNUM          reduce using rule 51 (range -> expr : expr .)
    FLOATNUM        reduce using rule 51 (range -> expr : expr .)
    STR             reduce using rule 51 (range -> expr : expr .)
    EYE             reduce using rule 51 (range -> expr : expr .)
    ONES            reduce using rule 51 (range -> expr : expr .)
    ZEROS           reduce using rule 51 (range -> expr : expr .)
    SUB             reduce using rule 51 (range -> expr : expr .)
    (               reduce using rule 51 (range -> expr : expr .)
    [               reduce using rule 51 (range -> expr : expr .)
    ID              reduce using rule 51 (range -> expr : expr .)
    ADD             shift and go to state 26
    MUL             shift and go to state 28
    DIV             shift and go to state 29
    DOT_ADD         shift and go to state 30
    DOT_SUB         shift and go to state 31
    DOT_MUL         shift and go to state 32
    DOT_DIV         shift and go to state 33
    GT              shift and go to state 34
    LT              shift and go to state 35
    GTE             shift and go to state 36
    LTE             shift and go to state 37
    EQ              shift and go to state 38
    NEQ             shift and go to state 39
    '               shift and go to state 40

  ! SUB             [ shift and go to state 27 ]
  ! [               [ shift and go to state 41 ]


state 113

    (49) stmt -> IF ( expr ) stmt ELSE stmt .

    RETURN          reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    BREAK           reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    CONTINUE        reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    ;               reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    {               reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    PRINT           reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    IF              reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    WHILE           reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    FOR             reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    INTNUM          reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    FLOATNUM        reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    STR             reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    EYE             reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    ONES            reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    ZEROS           reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    SUB             reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    (               reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    [               reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    ID              reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    $end            reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    }               reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)
    ELSE            reduce using rule 49 (stmt -> IF ( expr ) stmt ELSE stmt .)

